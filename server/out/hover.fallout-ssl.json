{
    "combat_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid combat_p_proc()\n```\nCalled in combat (every turn?)."
        }
    },
    "critter_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid critter_p_proc()\n```\nThis procedure is called every \"heartbeat\", which means it's run ten times each second, except during combat."
        }
    },
    "damage_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid damage_p_proc()\n```\nCalled when the critter takes damage."
        }
    },
    "description_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid description_p_proc()\n```\nCalled when the player inspects the object (binoculars)."
        }
    },
    "destroy_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid destroy_p_proc()\n```\nCalled on death of the critter or destruction of the object (except when using `destroy_object(self_obj)`)."
        }
    },
    "look_at_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid look_at_p_proc()\n```\nCalled when the player passes the cursor over any object."
        }
    },
    "map_enter_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid map_enter_p_proc()\n```\nCalled once by the engine each time the map is entered from another map. It is not run when the elevation is changed."
        }
    },
    "map_update_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid map_update_p_proc()\n```\nCalled roughly once every 30 seconds. It is also called each time you exit a dialogue, each time you exit the pipboy screen and each time you use an item. In addition to that, it is run once when you enter the map, and, seemingly, twice when you change elevation."
        }
    },
    "pickup_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid pickup_p_proc()\n```\nCalled when the player is caught stealing from this critter."
        }
    },
    "start": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid start()\n```\nThis procedure is only supposed to be called by the engine when the script is first run, then never again, unless specifically called from somewhere else."
        }
    },
    "talk_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid talk_p_proc()\n```\nCalled when the player tries to initiate dialogue with the critter."
        }
    },
    "timed_event_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid timed_event_p_proc()\n```\nThis procedure is called by the function `add_timer_event(ObjPtr obj, int time, int fixed_param)`.\n`ObjPtr` points to the object whose script's `timed_event_p_proc` procedure you want to access.\nTime is the number of game ticks (1 game tick = 1/10 seconds) you want to pass before the `timed_event_p_proc` is called.\n`fixed_param` is a variable you can set to differentiate between various timed events.\nIn `timed_event_p_proc`, you can check the value of `fixed_param` against whatever number you used when calling `add_timer_event`.\nThis allows for multiple uses of `timed_event_p_proc` in the same script."
        }
    },
    "use_obj_on_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid use_obj_on_p_proc()\n```\nCalled when:\n- A critter uses an object on another critter. (Or themselves).\n- A critter uses an object from inventory screen AND this object does not have \"Use\" action flag set and it's not active flare or explosive.\n- Player or AI uses any drug.\n"
        }
    },
    "use_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid use_p_proc()\n```\nCalled when:\n- A critter uses an object from inventory which have \"Use\" action flag set or it's an active flare or dynamite.\n- Player uses an object from main interface.\n"
        }
    },
    "use_skill_on_p_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid use_skill_on_p_proc()\n```\nCalled when a skill is used on the object."
        }
    },
    "AddNamedEvent": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid AddNamedEvent(ObjectPtr name, Procedure proc)\n```\nAdds named handler (proc) for event (name). Can be signaled only once, and removed afterwards."
        }
    },
    "AddNamedHandler": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid AddNamedHandler(ObjectPtr name, Procedure proc)\n```\nAdds named handler (proc) for event (name). Can be signaled many times."
        }
    },
    "ClearNamed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid ClearNamed(string event)\n```\nRemoves all handlers for named event."
        }
    },
    "SignalNamed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid SignalNamed(string event)\n```\nCalls events and/or handler for given name (event). See AddNamedEvent and AddNamedHandler to add handlers. This basically just calls the appropriate procedures."
        }
    },
    "action_being_used": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint action_being_used\n```\nReturns the current skill being used on a script object."
        }
    },
    "add_mult_objs_to_inven": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid add_mult_objs_to_inven(ObjectPtr who, ObjectPtr item, int count)\n```\nAdds (count) instances of an object (item) to another object's (who's) inventory. Note that this only works with objects of type Item."
        }
    },
    "add_obj_to_inven": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid add_obj_to_inven(ObjectPtr who, ObjectPtr item)\n```\nAdds an object (item) to another object's (who's) inventory. Note that this only works with objects of type Item."
        }
    },
    "add_timer_event": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid add_timer_event(ObjectPtr obj, int time, int info)\n```\nAdds a timed event call to the queue, at a given time offset, to call an object's (obj) script. Info is used to let scripts differentiate between timed event calls so that they can be hooked in multiple times. Info is read back by the script using the fixed_param operator. Note that time is in ticks (you can use game_ticks(seconds_num) to get the time in ticks from time in seconds)."
        }
    },
    "anim": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid anim(ObjectPtr who, int anim, int direction)\n```\nSets up a single-frame animation (anim) for the object (who) that runs in the given direction."
        }
    },
    "anim_action_frame": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint anim_action_frame(ObjectPtr who, int frame)\n```\nReturns the action frame of the given art frame on a given object (who). This can be used as the delay in an animation registration sequence."
        }
    },
    "anim_busy": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint anim_busy(ObjectPtr who)\n```\nReturns True if object (who) is currently animating, otherwise False. This can be used to determine if a given object has completed an animation."
        }
    },
    "animate_move_obj_to_tile": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_move_obj_to_tile(ObjectPtr who, int tile, int speed)\n```\nSets up an animation for a critter (who) to walk to a given tile (hex) at a given speed (speed). Speed (walk/run) can also have a flag attached (see define.h) to force the object (who) to stop it's current animation (for instance, if it was already walking somewhere) and then walk/run to the new location (tile)."
        }
    },
    "animate_rotation": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_rotation(int direction)\n```\n(Fallout 2 only) Changes the orientation (facing) of the self-object to the given direction (0-5)."
        }
    },
    "animate_run_to_tile": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_run_to_tile(int tile)\n```\n(Fallout 2 only) Sets up an animation for the self-object to RUN to a given tile (hex)."
        }
    },
    "animate_set_frame": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_set_frame(int newFrame)\n```\nChanges the current animation frame of the self-object to the given frame # (newFrame). This can be used to make lights go to broken lights or to alarm/siren lights, for example. Should be used in place of animate_stand for 2-frame anims."
        }
    },
    "animate_stand": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_stand\n```\nSets up an animation for the currently focused object (self) to run it's stand animation. This can be used to open doors, open container items (Refridgerator, for example) or to run a critter's fidget animation."
        }
    },
    "animate_stand_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_stand_obj\n```\nSets up an animation for an object (obj) to run it's stand animation. This can be used to open doors, open container items (refridgerator, for example) or to run a critter's fidget animation."
        }
    },
    "animate_stand_reverse": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_stand_reverse\n```\nSets up an animation for the currently focused object (self) to run it's stand animation in reverse. This is used only for non-critters, to cause them to close (close doors, open containers, etc."
        }
    },
    "animate_stand_reverse_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid animate_stand_reverse_obj(ObjectPtr obj)\n```\nSets up an animation for an object (obj) to run it's stand animation in reverse. This is used only for non-critters, to cause them to close (close doors, open containers, etc.)"
        }
    },
    "art_anim": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid art_anim(int fid)\n```\nReturns the animation that this fid represents (ANIM_stand, ANIM_pickup, etc.)"
        }
    },
    "attack": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid attack(ObjectPtr who)\n```\nCauses the focused object (self) to attempt to attack an object (who). This is a macro to attack_complex()."
        }
    },
    "attack_complex": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid attack_complex(ObjectPtr who, int called_shot, int num_attacks, int bonus, int min_damage, int max_damage, int attacker_results, int target_results\n```\nCauses the current object (self - must be a critter) to attempt to attack a critter (who) with various parameters modifying the combat: called_shot - 0/1/specific means none/random/specific (head, torso, etc.) num_attacks - the # of extra attacks the self object gets before the target bonus - the bonus to hit the target on the first turn only min_damage - the minimum damage that will be done the first attack max_damage - the maximum damage that will be done the first attack attacker_results - what state the attacker ends in after the first attack target_results - what state the target ends in after the first attack"
        }
    },
    "attack_setup": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid attack_setup(ObjectPtr who, ObjectPtr victim)\n```\nSets up an attack from who on victim, without expecting this script to be involved. Can be used to setup attacks on critters from the map script."
        }
    },
    "car_current_town": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint car_current_town\n```\nReturns the current town area the car can be found at. Area #'s can be found in scripts/headers/maps.h"
        }
    },
    "car_give_gas": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint car_give_gas(int amount)\n```\n(Fallout 2 only) Gives the car a given amount of gas."
        }
    },
    "car_give_to_party": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint car_give_to_party\n```\nGives the car to the party, and takes them to the worldmap."
        }
    },
    "combat_difficulty": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint combat_difficulty\n```\nReturns the current Combat difficulty level of the game (defined in the options screen). Value is 0-2."
        }
    },
    "combat_is_initialized": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint combat_is_initialized\n```\nReturns True if the system is currently in combat mode, False otherwise."
        }
    },
    "create_object": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr create_object(int pid, int tile_num, int elev)\n```\nCreates a new object of prototype (pid), placing it at a given tile number and at a given elevation (0-2). If the prototype indicates a script should be attached, then it will be."
        }
    },
    "create_object_sid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr create_object_sid(int pid, int tile_num, int elev, int sid)\n```\nCreates a new object of prototype (pid), placing it at a given tile # and at a given elevation (0-2). If sid is not -1, then it indicates that the default script should be overriden by this new script #."
        }
    },
    "critter_add_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_add_trait(ObjectPtr who, int trait_type, int trait, int amount)\n```\nAdds a particular trait (trait) of a given type (trait_type) to a particular critter (who). Possible traits under the SPECIAL system are limited to Perks, Traits, Object-instance information (such as team #'s, ai-packet #'s, etc.)"
        }
    },
    "critter_attempt_placement": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_attempt_placement(ObjectPtr who, int hex, int elev)\n```\nAttempts to place a critter at a given destination hex & elevation (0-2), if it fails, then it tries to find a nearby hex that is that is as near as possible to the start hex. No LONGER checks to see if the hex is visible on-screen."
        }
    },
    "critter_damage": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid critter_damage(ObjectPtr who, int dmg_amount)\n```\n- Macro: `critter_dmg(who, amount, (DMG_normal_dam BWOR DMG_NOANIMATE))`\n- Inflicts damage on a critter (who) of a given amount, killing it if necessary. Normal damage, no animation."
        }
    },
    "critter_dmg": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid critter_dmg(ObjectPtr who, int dmg_amount, int flags)\n```\nInflicts damage on a critter (who) of a given amount, killing it if necessary. Use `DMG_*` flags to customize behaviour."
        }
    },
    "critter_heal": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid critter_heal(ObjectPtr who, int amount)\n```\nHeals a critter for a given amount (if given a value above their MaxHP will go up to their maximum HP). [Note: can also input negative amounts, causing the critter to be hurt for that amount. This is useful because it bypasses all resistances and thresholds"
        }
    },
    "critter_injure": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_injure(ObjectPtr who, int how)\n```\nInjures a given critter (who) by crippling given limbs/body parts (defined by DAM_CRIP_ARM_LEFT, DAM_BLIND, etc. in define.h)"
        }
    },
    "critter_inven_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr critter_inven_obj(ObjectPtr who, int where)\n```\nDeprecated. Use `critter_inven_obj2` instead.\n\n---\nReturns a pointer to an object that is in a given spot (NULL if none).\nThe appropriate values for where are: `INVEN_TYPE_WORN`, `INVEN_TYPE_RIGHT_HAND`, and `INVEN_TYPE_LEFT_HAND`."
        }
    },
    "critter_is_fleeing": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_is_fleeing(ObjectPtr who)\n```\nReturns True if the critter object (who) has its FLEE flag set."
        }
    },
    "critter_mod_skill": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_mod_skill(ObjectPtr who, int skill, int amount)\n```\n- `who` Must be `dude_obj`. Will not work on other critters.\n- `skill` `SKILL_*` from `define.h`\n- `amount` Can be negative.\n\nModifies a given skill in a given critter object by a given amount.\n\nNote that for tagged skills, the amount will be rounded down to the closest even number."
        }
    },
    "critter_rm_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_rm_trait(ObjectPtr who, int trait_type, int trait, int amount)\n```\nRemoves a particular trait (trait) of a given type (trait_type) from a particular critter (who)."
        }
    },
    "critter_set_flee_state": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_set_flee_state(ObjectPtr who, bool flee_on\n```\nSets the FLEE flag on or off. This controls whether the critter flees during combat."
        }
    },
    "critter_skill_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_skill_level(ObjectPtr who, int skillNum)\n```\nReturns the current skill level of a particular object's (who) skill (skillNum)."
        }
    },
    "critter_state": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_state(ObjectPtr who)\n```\nReturns the state of a given critter object (from combat data), used to determine if a critter is dead, unconscious, etc."
        }
    },
    "critter_stop_attacking": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint critter_stop_attacking(ObjectPtr who)\n```\nFlags the critter object (who) as no longer wishing to be active in combat."
        }
    },
    "cur_map_index": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint cur_map_index\n```\nReturns the index # of the current map, to be matched with the define-constant in define.h."
        }
    },
    "cur_town": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint cur_town\n```\nReturns the index # of the current town, to be matched with the define-constant in define.h."
        }
    },
    "days_since_visited": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint days_since_visited\n```\nReturns the number of days since this map was last visited, or (-1) if it has never been visited before."
        }
    },
    "debug_msg": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid debug_msg(string text)\n```\nPrints a string to the debug monitor. Should be used exclusively for debug information, instead of display_msg()! The user will never see these messages unless they have debugging enabled and activated. If they have debugging enabled and DEBUGLOG set, the messages will only show up in debug.log file."
        }
    },
    "destroy_mult_objs": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint destroy_mult_objs(ObjectPtr item, int count)\n```\nDestroys count number of instances of an item object. This function will figure out which inventory this item is in (if it isn't on the ground). If it is on the ground, of course, there is only one instance of this object, so only one will be destroyed."
        }
    },
    "destroy_object": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint destroy_object(ObjectPtr obj)\n```\nDestroys an object (obj), which will call its script in the destroy_proc section if the object is *NOT* the calling object."
        }
    },
    "dialogue_reaction": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid dialogue_reaction(int mood)\n```\nSet up a reaction animation in the dialogue system."
        }
    },
    "dialogue_system_enter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid dialogue_system_enter\n```\nTells the dialog system that this object is requesting the talk system. This is used when the script wants to start dialog instead of waiting for the player to initiate it. The script will be called back in its talk_proc section."
        }
    },
    "difficulty_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint difficulty_level\n```\nReturns the current Game difficulty level of the game (defined in the options screen)."
        }
    },
    "display_msg": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid display_msg(string message)\n```\nDisplays a string on the in-game PDA display (lower-left hand corner)."
        }
    },
    "do_check": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint do_check(ObjectPtr who, int check, int modifier)\n```\nDo a check/test-roll versus one of the various basic traits (strength, perception, etc.). Note: these cannot generate Critical Success or Critical Failure as they are a basic X==Y check."
        }
    },
    "drop_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\ndrop_obj(ObjectPtr obj)\n```\nCauses the critter self-object to remove a given object (obj) from it's inventory and place it on the ground at its hex. This animates the self_obj."
        }
    },
    "drug_influence": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint drug_influence(ObjectPtr who)\n```\nReturns True if a given critter object (who) is currently under any drug influences, False otherwise."
        }
    },
    "dude_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr dude_obj\n```\nReturns a pointer to the dude object (the player)."
        }
    },
    "elevation": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint elevation(ObjectPtr obj)\n```\nReturns object's elevation"
        }
    },
    "end_dialogue": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid end_dialogue\n```\nTerminates the dialogue system."
        }
    },
    "endgame_movie": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid endgame_movie\n```\nPlays the endgame movie."
        }
    },
    "endgame_slideshow": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid endgame_slideshow\n```\nPlays the endgame slideshow. The slideshow will fade in to its palette, so it is proper to call gfade_out(1) and then expect this command to fix the palette for you."
        }
    },
    "explosion": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint explosion\n```\nSets up an explosion at a given tile number (where) on a given elevation, that will cause damage in a radius."
        }
    },
    "fixed_param": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fixed_param\n```\nReturns the value of the scripts fixed parameter. This is used with add_timer_event, for instance, to pass the info parameter back to the script."
        }
    },
    "float_msg": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid float_msg(ObjectPtr who, string message, int type)\n```\nAttempts to create a floating-text message (str) attached to an object (who) using colors dictated by type. There are two special types, WARNING and SEQUENTIAL. WARNING is used to print a message centered on the screen (such as for end-of-quest notifications), and SEQUENTIAL will cycle through the colors, in an attempt to give critters different-colored messages to differentiate them."
        }
    },
    "floor": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint floor(int/float value)\n```\nDeprecated. Use `floor2` instead.\n\n---\nWorks properly for positive values, but for negative ones functions like `ceil` (rounds up instead of down)."
        }
    },
    "gSay_End": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid gSay_End(uint var_index)\n```\nEnds a dialog sequence, which will bring up the sequence (actually display it)."
        }
    },
    "gSay_Message": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid gSay_Message(int msg_list, int msg_num, int reaction)\n```\nSets up a sayMessage, which is a reply with just a [Done] option. The msg_list determines which message file to look in, and the msg_num determines which line to use from the file."
        }
    },
    "gSay_Option": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\ngSay_Option(int msg_list, int msg_num, procedure target,  int reaction)\n```\nSets up an option-choice for a reply block, getting the string from the message file (msg_list) and message number (msg_num), which will cause a given reaction (reaction), and if chosen will jump to the given (target) procedure."
        }
    },
    "gSay_Reply": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\ngSay_Reply(int msg_list, int msg_num)\n```\nSets up a reply block (what the *CRITTER* says)."
        }
    },
    "gSay_Start": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid gSay_Start\n```\nStarts a new dialog sequence."
        }
    },
    "game_ticks": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint game_ticks(int seconds)\n```\nReturns the number of game ticks equal to a given # of seconds."
        }
    },
    "game_time": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint game_time\n```\nReturns the current game time in ticks."
        }
    },
    "game_time_advance": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid game_time_advance(int amount)\n```\nAdvances the current game time by (amount) ticks."
        }
    },
    "game_time_hour": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint game_time_hour\n```\nReturns the current hour of the day in a normal format, but without the colon. For example, the current starting game time is 721 (which is 7:21 am)."
        }
    },
    "game_ui_disable": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid game_ui_disable\n```\nDisables game user-interface input from the player (to \u2018lock-out' the player). You *MUST* make sure to re-enable the UI at some point afterwards."
        }
    },
    "game_ui_enable": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid game_ui_enable\n```\nRe-enables game user-interface input from the player. This *MUST* be called relatively soon after disabling the UI or the player will be stuck, unable to do anything."
        }
    },
    "game_ui_is_disabled": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint game_ui_is_disabled\n```\nReturns True if the game UI is currently disabled (the player is currently \u2018locked-out'), and False otherwise."
        }
    },
    "gdialog_barter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint gdialog_barter\n```\nTells the dialog system to switch to the barter screen. (Sets the barter modifier to 0)."
        }
    },
    "gdialog_mod_barter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint gdialog_mod_barter(int modifier)\n```\nTells the dialog system to switch to the barter screen, using a given modifier (+/- percent)."
        }
    },
    "gdialog_set_barter_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid gdialog_set_barter_mod(int modifier)\n```\nSets the current modifier for barter to a given percentage (modifier). Used to make barter easier/harder, even if the player initiates barter (as opposed to the script starting it.)"
        }
    },
    "get_critter_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_critter_stat(ObjectPtr who, int stat)\n```\nReturns the value of a desired attribute/stat in a critter object (who)."
        }
    },
    "get_day": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_day\n```\nReturns the current day of the month."
        }
    },
    "get_month": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_month\n```\nReturns the current month of the year."
        }
    },
    "get_pc_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nget_pc_stat(int pcStat)\n```\nReturns the value of a desired pc-only stat of the obj_dude. These are found in define.h all starting with 'PCSTAT_'."
        }
    },
    "get_poison": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_poison(ObjectPtr who)\n```\n(Fallout 2 only) Returns the value of a given critters' (who) poison level."
        }
    },
    "gfade_in": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid gfade_in(int time)\n```\nDoes a palette fade to black. The time parameter is currently not actually used."
        }
    },
    "gfade_out": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid gfade_out(int time)\n```\nDoes a palette fade from black to the game palette. The time parameter is currently not actually used."
        }
    },
    "giQ_Option": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid giQ_Option(int iq_test, int msg_list, int msg_num, procedure target, int reaction)\n```\nSets up an option-choice for a reply block if the player's IQ statistic is equal to or greater than a given value (iq_test), getting the string from the message file (msg_list) and message number (msg_num), which will cause a given reaction (reaction), and if chosen will jump to the given (target) procedure.\nThis is the only function that automatically accounts for Smooth Talker perk."
        }
    },
    "give_exp_points": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid give_exp_points\n```\nAdds experience points (points) to the player's total. These points may then be used by the player to enhance skills, etc."
        }
    },
    "global_var": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint global_var(int var_index)\n```\nReturns the value of a global variable # (var_index)."
        }
    },
    "goto_xy": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid goto_xy(int map)\n```\nUnknown - moves the character to the specific map?"
        }
    },
    "has_skill": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint has_skill(ObjectPtr who, int skill)\n```\nReturns the level of the skill (0-17) of the target critter. (0 to 200 for Fallout 1), (0 to 300 for Fallout 2)"
        }
    },
    "has_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint has_trait(int trait_type, ObjectPtr who, int trait\n```\nReturns the value of a given critter object's (who) trait of a given trait_type (see define.h). This can be used to determine if the player has a particular Perk, AI Packet, team num, current rotation, or Trait (finesse, bruiser, etc.)."
        }
    },
    "how_much": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint how_much(int val)\n```\nReturns the value of a completed skill vs. skill contest (how much the rolls differed by). This requires that you first call one of the contest roll commands, such as roll_vs_skill, skill_contest, etc."
        }
    },
    "inven_count": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint inven_count(ObjectPtr what)\n```\nReturns the count of how many inventory slots are filled on a given object (what)."
        }
    },
    "inven_ptr": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr inven(ObjectPtr what, int slotNum)\n```\nReturns a pointer to the object in slot # (slotNum) in a given object (what)."
        }
    },
    "inven_unwield": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid inven_unwield(ObjectPtr who)\n```\nAttempts to cause a critter to unwield any wielded weapons/items. If animations are currently disabled, it will just instantly change the art."
        }
    },
    "is_critical": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool is_critical(int rollResult)\n```\nReturns `True` if a given contest roll result is a critical result, otherwise `False`."
        }
    },
    "is_loading_game": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool is_loading_game\n```\nReturns True if the game is currently loading, False otherwise. This is used so that bad things don't happen on game load because a script is doing map_enter setup stuff."
        }
    },
    "is_skill_tagged": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool is_skill_tagged(int skillNum)\n```\nReturns True if a given skill is tagged."
        }
    },
    "is_success": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint is_success(int rollResult)\n```\nReturn `True` if a given contest roll result value is a success (including critical success), otherwise `False`."
        }
    },
    "item_caps_adjust": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint item_caps_adjust(ObjectPtr obj, int amount)\n```\nModifies the current caps count in an object (obj) by a given amount (amount). Can be positive or negative."
        }
    },
    "item_caps_total": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint item_caps_total(ObjectPtr obj)\n```\nReturns the current caps total in a given object's (obj) inventory."
        }
    },
    "jam_lock": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint jam_lock(ObjectPtr lockableObj)\n```\nJams a lock, which prevents the player from picking the lock for approximately 24 hours. Meant to be used when a player critically fails to pick a lock."
        }
    },
    "kill_critter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid kill_critter(ObjectPtr who, int death_frame)\n```\nKills a critter (obj) outright, placing it in the chosen death frame. Note: this does NOT animate the critter, and does NOT refresh the screen! It is meant to be used in scripts run when entering/exiting a map (map_init/map_exit)."
        }
    },
    "kill_critter_type": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid kill_critter_type(int pid)\n```\nKills all critters of a given type (pid) outright. NOTE: This can result in the 'frozen bodies' issue! kill_critter should always be used instead if possible, for this reason. Frozen bodies causes no actual gameplay issues, but it looks unrealistic and ridiculous."
        }
    },
    "language_filter_is_on": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool language_filter_is_on\n```\nReturns True if the language filter is currently filtering harsh language, False otherwise."
        }
    },
    "load_map": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid load_map(string map_name, int start_location)\n```\nLoads a new map (map_name), removing all scripts currently running and passing on the entrance location (start_location) to the new map's map_init script. Can also use the number representing the map in the map list (for example, between 0 to 64 in Fallout 1)"
        }
    },
    "local_var": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint local_var(uint var_index)\n```\nReturns the value of a local variable of given index # (var_index). If the user is not allowed local vars up to this number in the list of critters, this can generate errors."
        }
    },
    "map_first_run": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool map_first_run\n```\nReturns True if the current map is being run for the first time (in other words, this map was not loaded from a save-game)."
        }
    },
    "map_is_known": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool map_is_known(int mapIndex)\n```\nReturns True if a given map index is known, False otherwise."
        }
    },
    "map_known": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool map_known(int mapNum)\n```\nReturns True if a given map # (mapNum) is known, False otherwise."
        }
    },
    "map_var": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint map_var(uint var_index)\n```\nReturns the value of a map-global variable of a given index # (var_index)."
        }
    },
    "message_str": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nchar* message_str(int list, int msg_num)\n```\nReturns a string from the message module for a given list and a given # (msg_num)."
        }
    },
    "move_obj_inven_to_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmove_obj_inven_to_obj(ObjectPtr srcObj, ObjectPtr destObj)\n```\nMoves an object's (srcObj) entire inventory into another object's (destObj) inventory."
        }
    },
    "move_to": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint move_to(ObjectPtr obj, int tile_num, int elev)\n```\nImmediately moves object `obj` to the given tile number and elevation (0-2) on the current map.\nUsing this to change elevations during loading an in-combat save will lead to a crash. If `move_to` called in `map_enter_p_proc`, wrap in `not_is_loading_game` to avoid the crash."
        }
    },
    "obj_art_fid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint obj_art_fid(ObjectPtr obj)\n```\nReturns the fid # (used to index art) of a given object (obj)."
        }
    },
    "obj_being_used_with": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr obj_being_used_with\n```\nReturns a pointer to the object being used on another object."
        }
    },
    "obj_can_hear_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_can_hear_obj(ObjectPtr src_obj, ObjectPtr dst_obj)\n```\nReturns True if the source object (src_obj) is capable of hearing the destination object (dst_obj). This includes distance factors, current activity (standing/walking/running), and skill use (stealth/etc.)."
        }
    },
    "obj_can_see_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_can_see_obj(ObjectPtr src_obj, ObjectPtr dst_obj)\n```\nReturns True if the source object (src_obj) has line-of-sight (LOS) with the destination object (dst_obj). This also takes into account perception & stealth rolls of the objects are critters."
        }
    },
    "obj_carrying_pid_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr obj_carrying_pid_obj(ObjectPtr who, int pid)\n```\nReturns an Object pointer to an instance of an object of type pid if an object (who) is carrying an object of that type."
        }
    },
    "obj_close": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid obj_close(ObjectPtr what)\n```\nAttempts to close a given object (what) if it is of an openable type."
        }
    },
    "obj_drop_everything": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid obj_drop_everything(ObjectPtr who)\n```\nCauses a critter object (who) to drop all objects in it's inventory and drop it on the ground at its feet."
        }
    },
    "obj_is_carrying_obj_pid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint obj_is_carrying_obj_pid(ObjectPtr obj, in pid)\n```\nReturns the quantity of objects with matching prototype index #'s (pid) carried in the inventory of another object (obj)."
        }
    },
    "obj_is_locked": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_is_locked(ObjectPtr what)\n```\nReturns True if a given object (what) is a locked object, False if it is unlocked or not a lockable object."
        }
    },
    "obj_is_open": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_is_open(ObjectPtr what)\n```\nReturns True if a given object (what) is an open object, False if it is closed or not an openable object."
        }
    },
    "obj_is_visible_flag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_is_visible_flag(ObjectPtr who)\n```\n(Fallout 2 only) Returns True if a given object (who) is turned on (visible), False otherwise."
        }
    },
    "obj_item_subtype": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint obj_item_subtype(ObjectPtr item_obj)\n```\nReturns the subtype of an object of type 'item'. Examples would be food, armor, weapons, etc."
        }
    },
    "obj_lock": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid obj_lock(ObjectPtr what)\n```\nAttempts to lock a given object (what) if it is of a lockable type."
        }
    },
    "obj_name": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring obj_name(ObjectPtr obj)\n```\nReturns a string representing the name of the given object (what)."
        }
    },
    "obj_on_screen": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_on_screen(ObjectPtr what)\n```\nReturns True if a given object (what) is currently being drawn on-screen, False if it is not."
        }
    },
    "obj_open": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid obj_open(ObjectPtr what)\n```\nAttempts to open a given object (what) if it is of an openable type."
        }
    },
    "obj_pid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint obj_pid(ObjectPtr obj)\n```\nReturns the prototype id # (pid) of an object (obj)."
        }
    },
    "obj_set_light_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid obj_set_light_level(ObjectPtr obj, int intensity, int distance)\n```\nSet the light level for an object to a given intensity (0-100, percentage of possible maximum intensity), and distance of light in hexes (0-8)."
        }
    },
    "obj_type": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint obj_type(ObjectPtr obj)\n```\nReturns the type of an object (obj). This would be \u2018Item', \u2018Wall', \u2018Scenery', etc."
        }
    },
    "obj_unlock": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid obj_unlock(ObjectPtr what)\n```\nAttempts to unlock a given object (what) if it is of a lockable type."
        }
    },
    "override_map_start": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid override_map_start(int x, int y, int elev, int rot)\n```\nUsed when loading a new map, this forces the player (obj_dude) to start at a particular location (x/y), elevation (0-2) and rotation (0-5) when first coming up."
        }
    },
    "party_add": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid party_add(ObjectPtr who)\n```\nAdds a given critter (who) into the list of party members. This will also setup those objects so that they will not be saved in maps, and certain other things."
        }
    },
    "party_member_count": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint party_member_count(bool countHidden)\n```\nReturns the count of the currently in-party party members. (countHidden) determines whether or not to count the hidden members (hangers-on)."
        }
    },
    "party_member_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr party_member_obj(int pid)\n```\nReturns an ObjectPtr to a party member that matches a given pid. If that critter isn't currently a member of the party, then it will return NULL."
        }
    },
    "party_remove": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid party_remove(ObjectPtr who)\n```\nRemoves a given critter (who) from the list of party members. This will also change those objects so that certain object- and map-level things will respond differently to them."
        }
    },
    "pickup_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid pickup_obj(ObjectPtr obj)\n```\nCauses the critter self-object to animate and attempt to pick up a given object (obj). If used in regard to a critter, this flag is pinged when a steal detect fails. In other words when detected stealing, pickup_obj is called for the person you were stealing from."
        }
    },
    "play_gmovie": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid play_gmovie(int movieNum)\n```\nPlays one of the Fallout movies (full-screen, compressed, etc.)."
        }
    },
    "play_sfx": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nplay_sfx (string sfxFileName)\n```\nStarts a new sound effect to be played on the queue."
        }
    },
    "poison": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid poison(ObjectPtr who, int amount)\n```\nModifies the critter's poison level by a given amount, which can be negative"
        }
    },
    "proto_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint proto_data(int pid, int data_member)\n```\nReturns the value (can be int or string) of a data-member of a given prototype (pid)."
        }
    },
    "radiation_dec": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid radiation_dec(ObjectPtr who, int amount)\n```\nDecrements a critter's radiation counter by a given amount. NOTE: This should only be done to the player (obj_dude) in Fallout due to design restrictions!"
        }
    },
    "radiation_inc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid radiation_inc(ObjectPtr who, int amount)\n```\nIncrements a critter's radiation counter by a given amount. NOTE: This should only be done to the player (obj_dude) in Fallout due to design restrictions!"
        }
    },
    "random": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint random(int min, int max)\n```\nReturns a random value between (min) and (max), inclusive."
        }
    },
    "reg_anim_animate": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_animate(ObjectPtr what, int anim, int delay)\n```\nAdds a single, in-place animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)!"
        }
    },
    "reg_anim_animate_forever": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_animate_forever(ObjectPtr what, int anim, int delay)\n```\nAdds a single, in-place animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)! This animation will animate continuously until something in the system interrupts it. To be used *very* sparingly, for instance Gizmo's sign and the \u2018pray' signs in the children of the cathedral (which will have to be toned down)."
        }
    },
    "reg_anim_animate_reverse": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_animate_reverse(ObjectPtr what, int anim, int delay)\n```\nAdds a single, in-place reversed animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)! reg_anim_begin void Anim Tells the system to start an animation sequence-list."
        }
    },
    "reg_anim_clear": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_clear(ObjectPtr object)\n```\nTerminates all animations that are currently registered for a given object."
        }
    },
    "reg_anim_end": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_end\n```\nActivates the animation sequence-list. Without this call the animation will never occur. Note: All animation sequences must be registered at ONCE! In other words, you cannot let the script end and finish registering the animations later."
        }
    },
    "reg_anim_obj_move_to_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_obj_move_to_obj(ObjectPtr who, ObjectPtr dest_obj, int delay)\n```\nAdds an animation to cause a critter object (who) to attempt to walk to another object (dest_obj) at a given delay from the previous animation (delay should always be -1)!"
        }
    },
    "reg_anim_obj_move_to_tile": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_obj_move_to_tile(ObjectPtr who, int dest_tile, int delay)\n```\nAdds an animation to cause a critter object (who) to attempt to walk to a given destination tile number (dest_tile) at a given delay from the previous animation (delay should always be -1)!"
        }
    },
    "reg_anim_obj_run_to_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_obj_run_to_obj(ObjectPtr who, ObjectPtr dest_obj, int delay)\n```\nAdds an animation to cause a critter object (who) to attempt to run to another object (dest_obj) at a given delay from the previous animation (delay should always be -1)!"
        }
    },
    "reg_anim_obj_run_to_tile": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_obj_run_to_tile(ObjectPtr who, int dest_tile, int delay)\n```\nAdds an animation to cause a critter object (who) to attempt to run to a given destination tile number (dest_tile) at a given delay from the previous animation (delay should always be -1)!"
        }
    },
    "reg_anim_play_sfx": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_play_sfx(ObjectPtr who, string sfx_name, int delay)\n```\nAdds an animation to cause an object (who) to attempt to play a given sound effect (sfx_name) at a given delay from the previous animation."
        }
    },
    "rm_fixed_timer_event": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid rm_fixed_timer_event(ObjectPtr who, int fixed_val)\n```\nRemoves (clears) all timer events hooked to a given object's (obj) script that have a given fixed_value (fixed_val)."
        }
    },
    "rm_mult_objs_from_inven": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint rm_mult_objs_from_inven(ObjectPtr who, ObjectPtr obj, int count)\n```\nRemoves (count) instances of an object (obj) from another object's (who's) inventory. Note: this leaves the removed object in at location (0,1) on the map! You must call move_to(...) to place it back on the map. NOTE: This function returns the actual count that was removed (if you attempted to remove more instances than existed). You *MUST* store this value in a variable (though you don't have to actually do anything with it)."
        }
    },
    "rm_obj_from_inven": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid rm_obj_from_inven(ObjectPtr who, ObjectPtr obj)\n```\nRemoves an object (obj) from another object's (who's) inventory. NOTE: this leaves the removed object in at location (0,1) on the map! You must call move_to(...) to place it back on the map."
        }
    },
    "rm_timer_event": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid rm_timer_event(ObjectPtr obj)\n```\nRemoves (clears) all timer events hooked to a given object's (obj) script."
        }
    },
    "roll_dice": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nCritter roll_dice(obj Critter, int skill)\n```\nReturns the value of the completed dice roll. NOTE: Avellone says this is unimplemented."
        }
    },
    "roll_vs_skill": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint roll_vs_skill(ObjectPtr who, int skill, int modifier)\n```\nReturns the value of a completed skill roll made upon an object's (who's) skill level with a given skill, and modified by a given amount (may be zero). This value may then be passed to is_success and is_critical to determine the appropriate states, and the how_much call can be used to determine the difference succeeded or failed by."
        }
    },
    "rotation_to_tile": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint rotation_to_tile(int srcTile, int destTile)\n```\nReturns the rotation (0...5) to face a particular tile (destTile) from a particular tile (srcTile)."
        }
    },
    "running_burning_guy": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint running_burning_guy\n```\nReturns the setting for the running-burning-guy in the game (defined in the options screen)."
        }
    },
    "scr_return": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid scr_return\n```\nSets the return value for a scripts C-engine node, to be used by C code."
        }
    },
    "script_action": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint script_action\n```\nReturns the action that has activated this script. Examples include requests for the description of an object (description_proc), notifications of a spatial script being activated by something hitting its boundary (spatial_proc), or a critter being given its heartbeat (critter_proc, in other words being told to move)."
        }
    },
    "script_overrides": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid script_overrides\n```\nTells the C-engine that the script will override default behavior for the object. What this means is that the C-engine will not attempt to do things that it would normally do, in expectation that the script will handle those things itself. This is an IMPORTANT command! It is commonly used for the general player actions upon objects, such as looking at them (requesting a description), using them (opening doors, for example), or using items ON them (using a picklock or a key on a door lock)."
        }
    },
    "self_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr self_obj\n```\nReturns a pointer to the object connected to this script."
        }
    },
    "set_critter_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint set_critter_stat(ObjectPtr who, int stat, int mod)\n```\nDOES NOT SET THE STAT.\n\n**Modifies** attribute `stat` in critter `who` by value `mod`."
        }
    },
    "set_exit_grids": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_exit_grids(elevation markElev, int mapID, int elevation, int tileNum, int rotation)\n```\nSets all exit grids on a given elevation (markElev) to point to a destination mapID (may be -1 which means stay on this map), elevation, tileNum, and rotation."
        }
    },
    "set_global_var": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_global_var(uint var_index, int value)\n```\nSets the value of a global variable (var_index) to a given (value)."
        }
    },
    "set_light_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_light_level(int level).\n```\nSets the ambient light level (1-100). The range is Full Darkness to Full Daylight. NOTE: level is NOT percentange, full darkness is not black screen. set_light_level(0) actually corresponds to 25% brightness, and as level increases, brightness makes 2 huge jumps in the middle (49-51). Thus, certain brightness levels simply cannot be set."
        }
    },
    "set_local_var": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_local_var(uint var_index, int value)\n```\nSets the value of a local variable (var_index) to a given (value)."
        }
    },
    "set_map_start": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_map_start(int x, int y, int elev, int rot)\n```\nSets the start location & rotation (0-5) for the next time this map is entered (loaded & run)."
        }
    },
    "set_map_var": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_map_var(uint var_index, int value)\n```\nSets the value of a map-global variable (var_index) to a given (value)."
        }
    },
    "set_obj_visibility": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_obj_visibility(ObjectPtr obj, bool visibility)\n```\nSets the `OBJ_OFF` flag for an object (makes it not drawn).\nNotes:\n  - Visibility arg is _inverted_: `set_obj_visibility(who, true)` makes object invisible.\n  - Does not work when loading game."
        }
    },
    "signal_end_game": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid signal_end_game\n```\nTells the system that a script is indicating the game should be ended. This will return the player to the main-menu."
        }
    },
    "skill_contest": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint skill_contest(int skill)\n```\n(Fallout 2 only) Returns the value of a completed skill vs skill contest (to run through is_success & is_critical)."
        }
    },
    "source_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr source_obj\n```\nReturns a pointer to the source object (activator) for this action. The source object for a pickup_proc (pickup an object script_action) would be the critter picking the object up, for instance."
        }
    },
    "start_gdialog": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid start_gdialog(int msgFileNum, ObjectPtr who, int mood, int headNum, int backgroundIdx)\n```\nStart the dialogue system focusing on a critter `who` and in a given `mood`.\nThis call sets up the appropriate dialog windows, head art, etc.\nIf this call is not made before the normal dialog calls (`sayReply`, `sayMessage`, `sayOption`, etc.) then the dialog windows will not come up, and only grey boxes will appear with the text.\n\n`mood` argument is unused in vanilla. Instead, the function checks LVAR 0 of the script:\n- `LVAR > 10` - good reaction (happy head).\n- `-10 > LVAR >= 10` - neutral.\n- Else, angry head.\n\nIf sfall is installed, and `StartGDialogFix` is enabled, argument `mood` does work:\n- If `mood == -1`, use vanilla behaviour (check LVAR 0).\n- Else, use argument value. Same thresholds apply."
        }
    },
    "target_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr target_obj\n```\nReturns a pointer to the target object for this action. The target object is what is being acted upon."
        }
    },
    "terminate_combat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid terminate_combat\n```\nCombat Tells the combat system to terminate prematurely. USE WITH CAUTION. This doesn't prevent another (or even the SAME) script from re-starting combat, so make sure you turn off any hostile flags, etc."
        }
    },
    "tile_contains_obj_pid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool tile_contains_obj_pid(int tile, int elev, int pid)\n```\nReturns True if a particular tile contains an object with a matching prototype index # (obj pid)."
        }
    },
    "tile_contains_pid_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr tile_contains_pid_obj(int tile, int elev, int pid)\n```\nReturns a pointer to the first object that matches a particular pid # that is on a particular tile and elevation."
        }
    },
    "tile_distance": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_distance(int tile1, int tile2)\n```\nReturns the tile distance between two tile #'s"
        }
    },
    "tile_distance_objs": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_distance_objs(ObjectPtr obj1, ObjectPtr obj2)\n```\nReturns the tile distance between two objects (between their tile #'s)."
        }
    },
    "tile_is_visible": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool tile_is_visible(int tile)\n```\nReturns True if a given hex (tile) is currently visible, i.e. an object on it could conceivably be displayed on-screen. This includes hexes that may technically have bases that are off-screen, but on whom objects could exist that would bound into the actual display area."
        }
    },
    "tile_num": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_num(ObjectPtr obj)\n```\nReturns the tile number of object (obj)."
        }
    },
    "tile_num_in_direction": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_num_in_direction(int start_tile, int direction, int distance)\n```\nReturns the tile number of a tile offset from a starting tile in a given direction (0-5, the next tile in that direction)."
        }
    },
    "town_known": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool town_known(int townArea)\n```\nReturns True if a given town area (townArea) is known, False otherwise."
        }
    },
    "town_map": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid town_map\n```\n(Fallout 1 only) Sends a request for the game engine to bring up the Town Map screen, for the player to go to different locations in an area (different areas in Vault13, for example)."
        }
    },
    "use_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid use_obj(ObjectPtr obj)\n```\nUse a usable object"
        }
    },
    "use_obj_on_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr use_obj_on_obj(ObjectPtr item, ObjectPtr targetObj)\n```\nAttempt to use an item object on a target object (targetObj). This could be used to have a critter use a Stimpack on the player, for instance, or to use a key on a door."
        }
    },
    "using_skill": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool using_skill(ObjectPtr who, int skill)\n```\nReturns True if an active skill is being used, False otherwise. Examples of active skills are Stealth and First Aid."
        }
    },
    "violence_level_setting": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint violence_level_setting\n```\n(Fallout 2 only) Returns the current setting of the violence level. See define.h for values."
        }
    },
    "wield_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid wield_obj(ObjectPtr obj)\n```\nSets up an animation causing a critter (self_obj) to wield an object (obj) in that critters' inventory. This puts that object in the critter's hand."
        }
    },
    "wield_obj_critter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid wield_obj_critter(ObjectPtr who, ObjectPtr obj)\n```\nSets up an animation causing a critter (who) to wield an object (obj) in that critters' inventory. This puts that object in the critter's hand."
        }
    },
    "wm_area_set_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid wm_area_set_pos(int areaIdx, int xPos, int yPos)\n```\nSets the World Map coordinates for a given area/town (areaIdx) to a given x and y position."
        }
    },
    "world_map": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid world_map\n```\nSends a request for the game engine to bring up the World Map screen, for the player to move around to different locations."
        }
    },
    "world_map_x_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint world_map_x_pos\n```\nReturns the current X position of the party on the World Map."
        }
    },
    "world_map_y_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint world_map_y_pos\n```\nReturns the current Y position of the party on the World Map."
        }
    },
    "set_npc_stat_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_npc_stat_max(int stat, int value)\n```\nThe `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both."
        }
    },
    "set_npc_stat_min": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_npc_stat_min(int stat, int value)\n```\nThe `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both."
        }
    },
    "set_pc_stat_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pc_stat_max(int stat, int value)\n```\nThe `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both."
        }
    },
    "set_pc_stat_min": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pc_stat_min(int stat, int value)\n```\nThe `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both."
        }
    },
    "set_stat_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_stat_max(int stat, int value)\n```\nThe `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both."
        }
    },
    "set_stat_min": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_stat_min(int stat, int value)\n```\nThe `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both."
        }
    },
    "reg_anim_animate_and_hide": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_animate_and_hide(ObjectPtr, int animID, int delay)\n```\nWorks exactly like `reg_anim_animate` but the object will automatically disappear after the last animation frame (but not destroyed).\n- `delay`: delay from the previous animation. A value of -1 will execute the specified animation immediately after the previous one in the sequence ends.\n"
        }
    },
    "reg_anim_animate_and_move": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_animate_and_move(ObjectPtr, int tile, int animID, int delay)\n```\nPlays the specified animation while simultaneously moving the object to the given tile.\n- `delay`: delay from the previous animation. A value of -1 will execute the specified animation immediately after the previous one in the sequence ends.\n"
        }
    },
    "reg_anim_callback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_callback(procedure proc)\n```\nAdds the given procedure to an animation sequence-list and executes it in the registered sequence."
        }
    },
    "reg_anim_change_fid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_change_fid(ObjectPtr, int FID, int delay)\n```\nShould work like `art_change_fid_num` but in `reg_anim` sequence."
        }
    },
    "reg_anim_combat_check": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_combat_check(int enable)\n```\nAllows enabling all `reg_anim_*` functions in combat (including vanilla functions) if set to 0. It is automatically reset at the end of each frame, so you need to call it before `reg_anim_begin` - `reg_anim_end` block."
        }
    },
    "reg_anim_destroy": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_destroy(ObjectPtr)\n```\nGiven object is destroyed at the end of current animation set."
        }
    },
    "reg_anim_light": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_light(ObjectPtr, int light, int delay)\n```\nChange light of any object. Light argument is a light radius (0-8), but you can use highest 2 bytes to pass light intensity as well (example: 0xFFFF0008 - intensity 65535 and radius 8). If highest 2 bytes are 0, intensity will not be changed. Intensity range is from 0 to 65535 (0xFFFF)"
        }
    },
    "reg_anim_take_out": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_take_out(ObjectPtr, holdFrameID, delay)\n```\nPlays \"take out weapon\" animation for given `holdFrameID`. It is not required to have such weapon in critter's inventory."
        }
    },
    "reg_anim_turn_towards": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reg_anim_turn_towards(ObjectPtr, int tile/target, delay)\n```\nMakes object change its direction to face given tile number or target object."
        }
    },
    "array_key": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmixed array_key(int arrayID, int index)\n```\nDon't use it directly; it is generated by the compiler in foreach loops.\n  - for lists, returns index back (no change).\n  - for maps, returns a key at the specified numeric index (don't rely on the order in which keys are stored though).\n  - can be checked if given array is associative or not, by using index (-1): 0 - array is list, 1 - array is map.\n"
        }
    },
    "arrayexpr": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint arrayexpr(mixed key, mixed value)\n```\nDon't use it directly; it is used by compiler to create array expressions.\n- assigns value to a given key in an array, created by last `create_array` or `temp_array` call.\n- always returns 0.\n"
        }
    },
    "create_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint create_array(int size, int nothing)\n```\nCreates permanent array (but not \"saved\").\n- if `size >= 0`, creates list with given size.\n- if `size == -1`, creates map (associative array).\n- if `size == -1` and `flags == 2`, creates a \"lookup\" map (associative array) in which the values of existing keys are read-only and can't be updated. This type of array allows you to store a zero (0) key value.\n- returns array ID (valid until array is deleted).\n"
        }
    },
    "fix_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fix_array(int arrayID)\n```\nChanges \"temporary\" array into \"permanent\" (\"permanent\" arrays are not automatically saved into savegames)."
        }
    },
    "free_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid free_array(int arrayID)\n```\nDeletes any array.\n- if array was \"saved\", it will be removed from a savegame.\n"
        }
    },
    "get_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmixed get_array(int arrayID, mixed key)\n```\nReturns array value by key or index (shorthand: `arrayID[key]`).\n- if key doesn't exist or index is not in valid range, returns 0.\n"
        }
    },
    "len_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint len_array(int arrayID)\n```\nReturns number of elements or key=>value pairs in a given array.\n- if array is not found, returns -1 (can be used to check if given array exist).\n"
        }
    },
    "load_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint load_array(mixed key)\n```\nLoads array from savegame data by the same key provided in `save_array`.\n- returns array ID or zero (0) if none found.\n"
        }
    },
    "resize_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid resize_array(int arrayID, int size)\n```\nChanges array size. - applicable to maps too, but only to reduce elements. - there are number of special negative values of \"size\" which perform various operations on the array, use macros `sort_array`, `sort_array_reverse`, `reverse_array`, `shuffle_array` from **sfall.h** header."
        }
    },
    "save_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid save_array(mixed key, int arrayID)\n```\nMakes the array saveable; it will be saved in **sfallgv.sav** file when saving the game.\n- array ID is associated with given \"key\".\n- array becomes permanent (if it was temporary) and \"saved\".\n- key can be of any type (int, float or string).\n- if you specify 0 as the key for the array ID, it will make the array \"unsaved\".\n"
        }
    },
    "scan_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmixed scan_array(int arrayID, mixed value)\n```\nSearches for a first occurence of given value inside given array.\n- if value is found, returns its index (for lists) or key (for maps).\n- if value is not found, returns -1 (be careful, as -1 can be a valid key for a map).\n"
        }
    },
    "set_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_array(int arrayID, mixed key, mixed value)\n```\nSets array value (shorthand: `arrayID[key] := value`).\n- if used on list, \"key\" must be numeric and within valid index range (0..size-1)\n- if used on map, key can be of any type\n- to \"unset\" a value from map, just set it to zero (0)\n  - NOTE: to add a value of 0 for the key, use the float value of 0.0\n"
        }
    },
    "temp_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint temp_array(int size, int nothing)\n```\nWorks exactly like `create_array`, only created array becomes \"temporary\"."
        }
    },
    "art_cache_clear": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid art_cache_clear()\n```\nClears the cache of FRM image files loaded into memory."
        }
    },
    "art_exists": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint art_exists(int artFID)\n```\nchecks if given artFID exists in the game. Useful when you want to check if critter can use specific weapon: `art_exists((artFid bwand 0xffff0fff) bwor (weaponAnim * 0x1000))`."
        }
    },
    "refresh_pc_art": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid refresh_pc_art\n```"
        }
    },
    "set_hero_race": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_hero_race(int style)\n```"
        }
    },
    "set_hero_style": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_hero_style(int style)\n```"
        }
    },
    "eax_available": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint eax_available()\n```\nObsolete since sfall 2.1a. Always returns 0."
        }
    },
    "play_sfall_sound": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint play_sfall_sound(string file, int mode)\n```\nUsed to play `mp3/wav/wma` files. The path given is relative to the Fallout folder. Specify mode as 1 to loop the file continuously, 2 to replace the current background game music with playing the specified file in loop mode, or 0 to play the file once. If you don't wish to loop, `play_sfall_sound` returns 0. If you do loop, it returns an id which can be passed back to `stop_sfall_sound` when you want to stop the effect. All sounds effects will be stopped on game reload, looping or not. Does not require `AllowDShowSound` to be set to 1 in `ddraw.ini`.\n\nStarting from sfall 4.2.8/3.8.28, you can pass a value in the `mode` argument for a reduced sound volume. To set the volume, You need to convert the number to hexadecimal and use the argument format `0xZZZZ000Y`, where `ZZZZ` is the volume reduction value in range from 0 to 32767 (the value 32767 is mute), and `Y` is the playback mode.\n"
        }
    },
    "set_eax_environment": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_eax_environment(int environment)\n```\nObsolete since sfall 2.1a. Has no effect."
        }
    },
    "stop_sfall_sound": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid stop_sfall_sound(int soundID)\n```\nStops looping `mp3/wav/wma` files previously launched by `play_sfall_sound`. All sounds effects will be stopped on game reload, looping or not. Does not require `AllowDShowSound` to be set to 1 in `ddraw.ini`."
        }
    },
    "car_gas_amount": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint car_gas_amount()\n```\nReturns the current amount of fuel in player's car (between 0 and 80000).\nTo change fuel amount, use vanilla function: `metarule(METARULE_GIVE_CAR_GAS, amount)` - `amount` can be positive or negative.\n"
        }
    },
    "set_car_current_town": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_car_current_town(int town)\n```\nChanges the current town index for the player's car."
        }
    },
    "set_car_intface_art": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_car_intface_art(int artIndex)\n```\n- Changes the interface art (index in `intrface.lst`) for the car image on the world map interface\n- Should be called before going to the world map\n- Vanilla art index is 433\n"
        }
    },
    "attack_is_aimed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool attack_is_aimed()\n```\nReturns 1 if the aimed attack mode is selected, 0 otherwise."
        }
    },
    "block_combat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid block_combat(bool value)\n```\nDeny the player to enter combat mode."
        }
    },
    "combat_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmixed combat_data\n```\n- returns a pointer to the `C_ATTACK_*` data for the current combat attack process (see defined constants in **define_extra.h**)\n- can be used in conjunction with the `get_object_data` and `set_object_data` functions\n  example: `sfall_func3(\"set_object_data\", sfall_func0(\"combat_data\"), C_ATTACK_UNUSED, 255);`\n"
        }
    },
    "disable_aimed_shots": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid disable_aimed_shots(int pid)\n```\nAllows overriding the normal rules regarding which weapons are allowed to make aimed attacks. (e.g. weapons that cause explosive damage normally cannot normally make aimed shots.) stops a weapon from making aimed shots even if it normally coulld. Affects player and NPCs alike. The list of edited weapons is not saved over game loads, so you need to call the function once at each reload. Use a pid of 0 to represent unarmed."
        }
    },
    "force_aimed_shots": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid force_aimed_shots(int pid)\n```\nAllows overriding the normal rules regarding which weapons are allowed to make aimed attacks. (e.g. weapons that cause explosive damage normally cannot normally make aimed shots.) Will allow a weapon to make aimed shots even if it normally couldn't. Affects player and NPCs alike. Does not override the effects of the fast shot trait. The list of edited weapons is not saved over game loads, so you need to call the function once at each reload. Use a pid of 0 to represent unarmed."
        }
    },
    "get_attack_type": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_attack_type\n```"
        }
    },
    "get_bodypart_hit_modifier": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_bodypart_hit_modifier(int bodypart)\n```\nGets the hit percentage modifiers for aiming at specific bodyparts. Valid bodypart id's are from 0 to 8."
        }
    },
    "get_combat_free_move": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_combat_free_move()\n```\nReturns available \"bonus move\" points of the current critter's turn. For NPCs, this is always 0 unless changed by `set_combat_free_move`"
        }
    },
    "get_critical_table": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_critical_table(int crittertype, int bodypart, int level, int valuetype)\n```\nGets current critical table. For details see [critical hit tables](http://falloutmods.wikia.com/wiki/Critical_hit_tables). Requires `OverrideCriticalTable` to be enabled in `ddraw.ini` (already enabled by default)."
        }
    },
    "get_critter_current_ap": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_critter_current_ap(CritterPtr)\n```\nShould only be used during the target critters turn while in combat. Calling it outside of combat typically returns the critters max ap, but don't rely on that behaviour. (Specifically, if the critter has never before entered combat, it will probably return the critters base ap ignoring any extra bonuses from perks etc.)"
        }
    },
    "get_last_attacker": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr get_last_attacker(ObjectPtr critter)\n```\nWill return the last critter to deliberately launch an attack against the argument critter. If a critter has not launched/received an attack, it will return 0. Outside of combat always returns 0."
        }
    },
    "get_last_target": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr get_last_target(ObjectPtr critter)\n```\nWill return the last critter to be deliberately attacked. Outside of combat always returns 0."
        }
    },
    "reset_critical_table": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid reset_critical_table(int crittertype, int bodypart, int level, int valuetype)\n```\nResets the critical table to default (or to the contents of `CriticalOverrides.ini`, if it exists). For details see 'http://falloutmods.wikia.com/wiki/Critical_hit_tables'. Requires `OverrideCriticalTable` to be set to 1 in `ddraw.ini`. (Disabled by default, because it noticably increases loading times.)"
        }
    },
    "set_bodypart_hit_modifier": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_bodypart_hit_modifier(int bodypart, int value)\n```\nAlters the hit percentage modifiers for aiming at specific bodyparts. Valid bodypart id's are from 0 to 8. Changes are not saved, and will reset to the defaults (or to the values specified in ddraw.ini if they exist) at each reload."
        }
    },
    "set_combat_free_move": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_combat_free_move(int value)\n```\nAllows changing \"bonus move\" points (yellow lights on the interface bar) that can only be used for movement, not attacking\n- Can be called from `HOOK_COMBATTURN` at the start of the turn (will not work on `dude_obj`)\n- Can be called from `HOOK_STDPROCEDURE` with `combat_proc` event (will work on both NPCs and `dude_obj`)\n"
        }
    },
    "set_critical_table": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critical_table(int crittertype, int bodypart, int level, int valuetype, int value)\n```\nUsed for modifying the critical table. For details see [critical hit tables](http://falloutmods.wikia.com/wiki/Critical_hit_tables). Changes are not saved, and will reset to the defaults (or to the contents of `CriticalOverrides.ini`, if it exists) at each game reload. Requires `OverrideCriticalTable` to be enabled in `ddraw.ini` (already enabled by default)."
        }
    },
    "set_critter_burst_disable": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_burst_disable(int critter, int disable)\n```"
        }
    },
    "set_critter_current_ap": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_current_ap(CritterPtr, int ap)\n```\nShould only be used during the target critters turn while in combat."
        }
    },
    "set_spray_settings": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_spray_settings(int centerMult, int centerDiv, int targetMult, int targetDiv)\n```\nAllows changing the multipliers and divisors for the bullet distribution of burst attacks dynamically. All settings are automatically reset to default values (**ComputeSpray_\\*** settings in ddraw.ini) after each attack action\n- Should be called before the calculation of the bullet distribution (e.g. in `HOOK_TOHIT` or `HOOK_AMMOCOST`)\n- `centerDiv/targetDiv`: the minimum value of divisor is 1\n- `centerMult/targetMult`: multiplier values are capped at divisor values\n- __NOTE:__ refer to the description of **ComputeSpray_\\*** settings in ddraw.ini for details of the bullet distribution of burst attacks\n"
        }
    },
    "get_cursor_mode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_cursor_mode()\n```\nReturns the current cursor mode. Values: 0 - movement cursor, 1 - command cursor, 2 - targeting cursor, 4 to 10 are Skilldex skills (yellow targeting cursor)."
        }
    },
    "set_cursor_mode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_cursor_mode(int mode)\n```\nSets the current cursor mode."
        }
    },
    "get_explosion_damage": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_explosion_damage(itemPid)\n```\nReturns an array of the minimum and maximum damage of the explosive item."
        }
    },
    "item_make_explosive": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid item_make_explosive(int pid, int activePid, int minDamage, int maxDamage)\n```\n- makes the specified item (pid) an explosive item like Dynamite or Plastic Explosives\n- `maxDamage` is optional\n- `activePid` is for an item with an active timer, can be the same as the `pid` argument\n- the item proto must be the **Misc Item** type and have the **Use** action flag\n- minDamage/maxDamage are the minimum and maximum explosion damage\n- using the function on an item that is already set as an explosive will override its previous settings\n- NOTE: this function does not work for pids of Dynamite and Plastic Explosives\n"
        }
    },
    "metarule2_explosions": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint metarule2_explosions(int arg1, int arg2)\n```\nWas made as a quick-and-dirty hack to enable dynamic changes to some explosion parameters for ranged attacks. All changed parameters are automatically reset to vanilla state after each attack action."
        }
    },
    "set_attack_explosion_art": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_attack_explosion_art(x, y)\n```\nY not used and X is a misc frame ID (last 3 bytes, without object type) to use for the next explosion."
        }
    },
    "set_attack_explosion_pattern": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_attack_explosion_pattern(x, y)\n```\nCurrently Y is not used and X means: 1 - reduced explosion pattern (3 effects are spawned instead of 7), 0 - full pattern."
        }
    },
    "set_attack_explosion_radius": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_attack_explosion_radius(x)\n```\nChanges radius at which explosion will hit secondary targets for the next attack (from the experiments it is limited to something around 8 by the engine)."
        }
    },
    "set_attack_is_explosion_fire": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_attack_is_explosion_fire\n```\nIf you call this right before using a weapon with fire damage type (e.g. in `HOOK_AFTERHITROLL`), it will produce explosion effects (and radius damage) just like \"explosion\" type, but all targets will still receive fire damage."
        }
    },
    "set_dynamite_damage": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_dynamite_damage(minDmg, maxDmg)\n```\nSets the minimum and maximum damage for Dynamite. Changed damage will be reset each time the player reloads the game."
        }
    },
    "set_explosion_max_targets": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_explosion_max_targets(x)\n```\nSets the maximum number of additional targets for an explosion, valid range: 1..6 (default is 6)."
        }
    },
    "set_explosion_radius": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_explosion_radius(grenade, rocket)\n```\nSets a permanent radius of the explosion for grenades and/or rockets. Passing 0 means not changing the corresponding radius. Changed radius will be reset each time the player reloads the game."
        }
    },
    "set_plastic_damage": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_plastic_damage(minDmg, maxDmg)\n```\nSets the minimum and maximum damage for Plastic Explosives. Changed damage will be reset each time the player reloads the game."
        }
    },
    "available_global_script_types": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint available_global_script_types\n```"
        }
    },
    "set_global_script_repeat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_global_script_repeat(int frames)\n```\nOnly has an effect on the script it is called from. Every global script needs its own `game_loaded` block to correctly set up repeat rate. Will have no effect if called on a non-global script."
        }
    },
    "set_global_script_type": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_global_script_type(int type)\n```\nOnly has an effect on the script it is called from. Every global script needs its own `game_loaded` block to correctly set up the script type."
        }
    },
    "get_sfall_global_float": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat get_sfall_global_float(string/int varname)\n```\nThese functions require an __EXACTLY 8 characters long__, case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don't have to be declared beforehand in `vault13.gam`. Trying to get a variable which hasn't been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game."
        }
    },
    "get_sfall_global_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_sfall_global_int(string/int varname)\n```\nThese functions require an __EXACTLY 8 characters long__, case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don't have to be declared beforehand in `vault13.gam`. Trying to get a variable which hasn't been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game."
        }
    },
    "set_sfall_global": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_sfall_global(string/int varname, int/float value)\n```\nThese functions require an __EXACTLY 8 characters long__, case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don't have to be declared beforehand in `vault13.gam`. Trying to get a variable which hasn't been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game."
        }
    },
    "activate_shader": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid activate_shader(int ID)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "deactivate_shader": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid deactivate_shader(int ID)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "force_graphics_refresh": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid force_graphics_refresh(bool enabled)\n```\nForces the screen to redraw at times when it normally wouldn't. If you're using animated shader, turning this option on is recommended.\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "free_shader": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid free_shader(int ID)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "get_screen_height": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_screen_height()\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "get_screen_width": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_screen_width()\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "get_shader_texture": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_shader_texture(int ID, int texture)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "get_shader_version": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_shader_version\n```\nGives you the highest shader version supported by the player's graphics cards. Possible return values are 11, 12, 13, 14, 20, 21 and 30.\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "graphics_funcs_available": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool graphics_funcs_available\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "load_shader": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint load_shader(string path)\n```\nTakes a path relative to the `<GameRoot>\\<master_patches>\\shaders\\` directory as an argument and returns a shader ID. That ID should be passed as the first argument to all other shader functions, and is valid until `free_shader` is called on the ID, the player loads a saved game or the player quits to the main menu.\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "set_palette": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_palette(string path)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "set_shader_float": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_shader_float(int ID, string param, float value)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "set_shader_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_shader_int(int ID, string param, int value)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "set_shader_mode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_shader_mode(int mode)\n```\nTells sfall when to use a shader. The parameter is a set of 32 flags which specify the screens on which the shader will be disabled, unless bit 32 is set, in which case the shader will only be active on those screens. Remember that screens are displayed on top of each other; if the player opens the character menu which in combat, the game still considers the player to be in combat. See **sfall.h** for a list of defines.\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "set_shader_texture": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_shader_texture(int ID, string param, int texID)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "set_shader_vector": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_shader_vector(int ID, string param, float f1, float f2, float f3, float f4)\n```\nThe graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing."
        }
    },
    "get_sfall_arg": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmixed get_sfall_arg()\n```\nGets the next argument from sfall. Each time it's called it returns the next argument, or otherwise it returns 0 if there are no more arguments left. You can arbitrarily get the value of any argument using the `sfall_func1(\"get_sfall_arg_at\", argNum)` function."
        }
    },
    "get_sfall_arg_at": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nmixed get_sfall_arg_at(int argNum)\n```\nGets the value of hook argument with the specified argument number (first argument of hook starts from 0)"
        }
    },
    "get_sfall_args": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_sfall_args()\n```\nReturns all hook arguments as a new temp array."
        }
    },
    "init_hook": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint init_hook()\n```\nThe hook script equivalent of `game_loaded`; it returns 1 when the script is loaded for the first time or when the player reloads the game, and 0 otherwise."
        }
    },
    "register_hook": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid register_hook(int hookID)\n```\nUsed from a normal global script if you want to run it at the same point a full hook script would normally run. In case of this function, `start` procedure will be executed in current global script. You can use all above functions like normal."
        }
    },
    "register_hook_proc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid register_hook_proc(int hookID, proc procedure)\n```\nThe same as `register_hook`, except that you specifically define which procedure in the current script should be called as a hook (instead of \"start\" by default). Pass procedure the same as how you use dialog option functions. This IS the recommended way to use hook scripts, as it gives both modularity (each mod logic in a separate global script with no conflicts) and flexibility. You can place all related hook scripts for a specific mod in one global script!\n\nUse zero (0) as second argument to unregister hook script from current global script.\n\n__NOTE:__ you can hook several scripts to a single hook point, for example if it's different mods from different authors or just some different aspects of one larger mod. When one of the scripts in a chain returns value with `set_sfall_return`, the next script may override this value if calls `set_sfall_return` again.\n\n__Example:__ Sometimes you need to multiply certain value in a chain of hook scripts. Let's say we have a **Mod A** which reduces all \"to hit\" chances by 50%. The code might look like this:\n\n```js\noriginal_chance = get_sfall_arg;\nset_sfall_return(original_chance / 2);\n```\n\n**Mod B** also want to affect hit chances globally, by increasing them by 50%. Now in order for both mods to work well together, we need to add this line to **Mod A** hook script:\n```js\nset_sfall_arg(0, (original_chance / 2));\n```\n\nThis basically changes hook argument for the next script. **Mod B** code:\n```js\noriginal_chance = get_sfall_arg;\nset_sfall_return(original_chance * 1.5);\nset_sfall_arg(0, (original_chance * 1.5));\n```\n\nSo if you combine both mods together, they will run in chain and the end result will be a 75% from original hit chance (hook register order doesn't matter in this case, if you use `set_sfall_arg` in both hooks).\n\nThe defines to use for the `hookID` are in **sfall.h**.\n"
        }
    },
    "register_hook_proc_spec": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid register_hook_proc_spec(int hookID, procedure proc)\n```\nWorks the same as `register_hook_proc`, except that it registers the current script at the end of the hook script execution chain (i.e. the script will be executed after all previously registered scripts for the same hook, including the `hs_<name>.int` script). In addition, all scripts hooked to a single hook point with this function are executed in the exact order of how they were registered. In the case of using `register_hook` and `register_hook_proc` functions, scripts are executed in reverse order of how they were registered.\n**The execution chain of script procedures for a hook is as follows:** 1. Procedures registered with `register_hook` and `register_hook_proc` functions (executed in reverse order of registration). 2. The `hs_<name>.int` script. 3. Procedures registered with the `register_hook_proc_spec` function (executed in the exact order of registration)."
        }
    },
    "set_sfall_arg": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_sfall_arg(int argNum, int value)\n```\nChanges argument value. The argument number (`argNum`) is 0-indexed. This is useful if you have several hook scripts attached to one hook point (see `register_hook_proc`)."
        }
    },
    "set_sfall_return": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_sfall_return(any value)\n```\nUsed to return the new values from the script. Each time it's called it sets the next value, or if you've already set all return values it does nothing."
        }
    },
    "get_ini_config": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_ini_config(string file)\n```\nLoads a given INI file and returns a permanent array (map) where keys are section names and values are permanent sub-arrays (maps) where keys and values are strings.\n- Searches the file in the regular file system, like with all other ini-related functions.\n- Subsequent calls for the same file will return the same array, unless it was disposed using `free_array`.\n"
        }
    },
    "get_ini_config_db": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_ini_config_db(string file)\n```\nWorks exactly like `get_ini_config`, except it searches the file in database (DAT) files. If not found, then it will try the regular file system."
        }
    },
    "get_ini_section": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_ini_section(string file, string sect)\n```\nReturns an associative array of keys and values for a given INI file and section.\n- If the INI file is not found, it returns an empty array.\n- __NOTE:__ all keys and their values will be of String type.\n"
        }
    },
    "get_ini_sections": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_ini_sections(string file)\n```\nReturns an array of names of all sections in a given INI file.\n- If the INI file is not found, it returns an empty array.\n"
        }
    },
    "get_ini_setting": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_ini_setting(string setting)\n```\nReads an integer value from an ini file in the Fallout directory.\n- It only takes a single argument; seperate the file name, section and key with a \"\\|\" character; e.g. `myvar:=get_ini_setting(\"myini.ini|mysec|var1\")`\n- If the file or key cannot be found or the setting argument is in an invalid format, it returns -1.\n- The file name is limited to 63 chars, including the extension.\n- The section name is limited to 32 characters.\n- It can also be used to get sfall settings by using **ddraw.ini** as the file name.\n"
        }
    },
    "get_ini_string": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring get_ini_string(string setting)\n```\nReads a string value from an ini file in the Fallout directory.\n- If the file or key cannot be found, it returns an empty string.\n- If the setting argument is in an invalid format, it returns -1 (integer).\n"
        }
    },
    "modified_ini": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint modified_ini\n```\nReturns the value of ModifiedIni setting in [Main] section of the INI."
        }
    },
    "set_ini_setting": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_ini_setting(string setting, int/string value)\n```\nWrites an integer or a string value to an ini file in the Fallout directory. If the ini file does not exist, it will be created The setting argument works in the same way as in `get_ini_setting`, seperate the file name, section and key with a \"|\" character. __Note:__ the file name is limited to 63 chars (including the extension), the section name is limited to 32 characters."
        }
    },
    "display_stats": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid display_stats()\n```\n- Updates player's stats in the inventory display window or on the character screen.\n- NOTE: works only when the interface window is opened\n"
        }
    },
    "inventory_redraw": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid inventory_redraw(invSide)\n```\nRedraws inventory items list in the inventory/loot/barter screens. Argument invSide specifies which side needs to be redrawn: 0 - the player, 1 - target (container/NPC in loot/barter screens), -1 - both sides (same as without argument)."
        }
    },
    "get_mouse_buttons": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_mouse_buttons()\n```\nReturns the number of the mouse button that is currently pressed (1 - left, 2 - right, 3 - left+right, 4 - middle, 0 otherwise)."
        }
    },
    "get_mouse_x": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_mouse_x()\n```"
        }
    },
    "get_mouse_y": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_mouse_y()\n```"
        }
    },
    "key_pressed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint key_pressed(int dxScancode)\n```"
        }
    },
    "tap_key": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid tap_key(int dxScancode)\n```"
        }
    },
    "remove_attacker_knockback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid remove_attacker_knockback(CritterPtr)\n```\nThe `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads."
        }
    },
    "remove_target_knockback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid remove_target_knockback(CritterPtr)\n```\nThe `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads."
        }
    },
    "remove_weapon_knockback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid remove_weapon_knockback(WeaponPtr)\n```\nThe `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads."
        }
    },
    "set_attacker_knockback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_attacker_knockback(CritterPtr, int type, float value)\n```\nThe `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads."
        }
    },
    "set_target_knockback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_target_knockback(CritterPtr, int type, float value)\n```\nThe `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads."
        }
    },
    "set_weapon_knockback": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_weapon_knockback(WeaponPtr, int type, float value)\n```\nThe `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads."
        }
    },
    "list_as_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray list_as_array(int type)\n```\nThe `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list (defined in **sfall.h**). It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards."
        }
    },
    "list_begin": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint list_begin(int type)\n```\nThe `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list (defined in **sfall.h**). It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards."
        }
    },
    "list_end": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid list_end(int listid)\n```\nThe `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list (defined in **sfall.h**). It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards."
        }
    },
    "list_next": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint list_next(int listid)\n```\nThe `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list (defined in **sfall.h**). It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards."
        }
    },
    "party_member_list": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray party_member_list(int includeHidden)\n```\nReturns an array of all current party members (0 - only critter-type, alive and visible will be returned, 1 - all object, including Trunk, etc.)\nThe `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list (defined in **sfall.h**). It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards."
        }
    },
    "lock_is_jammed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool lock_is_jammed(ObjectPtr obj)\n```\nReturns 1 if the lock (container or scenery) is currently jammed, 0 otherwise."
        }
    },
    "set_unjam_locks_time": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_unjam_locks_time(int time)\n```\nSets after how many hours (up to 127 hours) jammed locks will be unjammed if the player leaves the map. Also disables the auto unjam that occurs at midnight when the player is on the map. Passing 0 will disable the auto unjam mechanism completely. The auto unjam mechanism will be reset each time the player reloads the game."
        }
    },
    "unjam_lock": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid unjam_lock(ObjectPtr obj)\n```\nUnjams a lock immediately without having to wait until the next day, or leave the map and then return after 24 hours. __Does not work__ in `use_skill_on_p_proc` procedure."
        }
    },
    "intface_hide": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid intface_hide()\n```\nHides main interface."
        }
    },
    "intface_is_hidden": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool intface_is_hidden()\n```\nReturns 1 if interface is currently hidden, 0 otherwise."
        }
    },
    "intface_redraw": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid intface_redraw(bool winType)\n```\nRedraws main game interface. Useful after direct changes to current player weapons or stats to reflect changes.\n- redraws main game interface, useful to reflect changes after directly changing current player weapons or stats\n- `winType`: the type number of the interface window (see `WINTYPE_*` constants in **sfall.h**). Pass `-1` to redraw all interface windows.\n"
        }
    },
    "intface_show": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid intface_show()\n```\nShows main interface."
        }
    },
    "exec_map_update_scripts": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid exec_map_update_scripts()\n```\nExecutes `map_update_p_proc` for all objects on map and global/hook scripts as well."
        }
    },
    "force_encounter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid force_encounter(int map)\n```\nCan be called either from a global script while traveling on the world map, or from a normal script while on a local map. In either case the encounter occurs shortly after the next time the player moves on the world map. The player will not get an outdoorsman skill check."
        }
    },
    "force_encounter_with_flags": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid force_encounter_with_flags(int map, int flags)\n```\nDoes the same thing as force_encounter, but allows the specification of some extra options (see **sfall.h** for available flags).\nForcing a random encounter on a map that is not normally used for random encounters may cause the player to lose the car, if they have it. In this case use `force_encounter_with_flags` with the `ENCOUNTER_FLAG_NO_CAR` flag set.\n"
        }
    },
    "get_map_enter_position": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_map_enter_position()\n```\nReturns an array of the player's position data (index: 0 - tile, 1 - elevation, 2 - rotation) when entering the map through exit grids. If entering from the world map, the tile value will be -1. Should be called in `map_enter_p_proc` procedure to get the correct position data."
        }
    },
    "get_terrain_name": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring sfall_func2(\"get_terrain_name\", int x, int y)\n```\nReturns the terrain type name for the sub-tile on the world map by the specified coordinates, or by the player's current position if called without arguments."
        }
    },
    "in_world_map": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool in_world_map\n```\nReturns 1 if the player is looking at the world map, or 0 at any other time. Obviously this is only useful in global scripts, since normal scripts will never get the chance to run on the world map."
        }
    },
    "set_map_enter_position": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_map_enter_position(int tile, int elevation, int rotation)\n```\nOverrides the players entry position when entering the map through exit grids. Setting the tile to 0 will put the player on the start hex (default tile and elevation) of the map. Works only in `map_enter_p_proc` procedure."
        }
    },
    "set_map_time_multi": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_map_time_multi(float multi)\n```\nAdjusts how fast time passes while you're on the world map. It takes a single float as an argument, where 1 is the normal speed. This function works in addition to the `WorldMapTimeMod` setting in `ddraw.ini` and the Pathfinder perk, rather than overriding it, so calling `set_map_time_multi(0.5)` when the player has 2 levels of Pathfinder would result in time passing at 25% the normal speed on the world map."
        }
    },
    "set_terrain_name": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func3(\"set_terrain_name\", int x, int y, string name)\n```\nOverrides the terrain type name for the sub-tile on the world map by the specified coordinates."
        }
    },
    "set_town_title": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func2(\"set_town_title\", int areaID, string title)\n```\nSets a floating text for a town on the world map when hovering the cursor over the player's marker.\n```\n- areaID: the ID number of the town from city.txt\n```\n"
        }
    },
    "^": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nx^y\n```\nExponentiation. Use as any other arithmetic operator, like `5^(1/3)`.\nIf exponent is an integer, you can use a negative base, otherwise you will get \"NaN\" with a negative base.\nIf both arguments are integers, the result will be an integer.\n"
        }
    },
    "abs": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint/float abs(int/float x)\n```\nAbsolute (positive) value of x."
        }
    },
    "arctan": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat arctan(float x, float y)\n```\nArctangent of x. Pass 1 as y (don't ask...)."
        }
    },
    "ceil": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint ceil(float x)\n```\nRound x to the nearest integer that is not less than x."
        }
    },
    "cos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat cos(float x)\n```\nCosine of x"
        }
    },
    "div": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\ndiv(x, y)\n```\nUnsigned integer division. Use as a division operator, like `3 + (20 div 5)`.\nIf both dividend and divisor are integers, they will be treated as unsigned integers.\nIf one of them is a float, div will perform the signed division just like vanilla division operator.\n"
        }
    },
    "exponent": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat exponent(float x)\n```\nE^X"
        }
    },
    "floor2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint floor2(int/float value)\n```\nWorks just like vanilla floor function, but returns correct integers for negative floats.\n- __NOTE:__ vanilla `floor` function works exactly the same as `ceil` for negative floats (i.e. basically `trunc` in C/C++).\n"
        }
    },
    "log": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat log(float x)\n```\nNatural logarithm of x."
        }
    },
    "round": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint round(float x)\n```\nRound x to the nearest integer."
        }
    },
    "sin": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat sin(float x)\n```\nSine of x"
        }
    },
    "sqrt": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat sqrt(float x)\n```\nSquare root of x."
        }
    },
    "tan": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat tan(float x)\n```\nTangent of x"
        }
    },
    "has_fake_perk_npc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint has_fake_perk_npc(object npc, string namePerk)\n```\nThese functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)"
        }
    },
    "has_fake_trait_npc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint has_fake_trait_npc(object npc, string nameTrait)\n```\nThese functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)"
        }
    },
    "set_fake_perk_npc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_fake_perk_npc(object npc, string namePerk, int level, int image, string desc)\n```\nThese functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)"
        }
    },
    "set_fake_trait_npc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_fake_trait_npc(object npc, string nameTrait, int active, int image, string desc)\n```\nThese functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)"
        }
    },
    "set_selectable_perk_npc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_selectable_perk_npc(object npc, string namePerk, int active, int image, string desc)\n```\nThese functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)"
        }
    },
    "dialog_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr dialog_obj()\n```\nReturns a pointer to the object (critter) the player is having a conversation or bartering with."
        }
    },
    "get_flags": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_flags(ObjectPtr obj)\n```\nGets the current value of object flags (see **define_extra.h** for available flags)."
        }
    },
    "get_object_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nget_object_data(ObjectPtr object, int offset)\n```\nReturns the data at the specified offset of an object (see `OBJ_DATA_*` constants in **define_extra.h** for offsets)."
        }
    },
    "get_script": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_script(ObjectPtr obj)\n```\n- accepts a pointer to an object and returns its scriptID (line number in `scripts.lst`), or 0 if the object is unscripted.\n- returns -1 on argument error.\n"
        }
    },
    "loot_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr loot_obj()\n```\nReturns a pointer to the target object (container or critter) of the loot screen."
        }
    },
    "obj_is_carrying_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint (ObjectPtr invenObj, ObjectPtr itemObj)\n```\nReturns number of `itemObj` inside invenObj's inventory, note that both arguments are object pointers. useful when dealing with different stacks of same item (`obj_is_carrying_obj_pid` just returns total for all stacks of the same PID.)"
        }
    },
    "obj_is_openable": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool obj_is_openable(object obj)\n```\nReturns True if the object is openable (i.e. has an opening/closing animation), False otherwise"
        }
    },
    "obj_under_cursor": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr obj_under_cursor(bool onlyCritter, bool includeDude)\n```\nReturns the object under the cursor on the main game screen.\n- onlyCritter:\n  - True - only checks critters and ignores their cover (roof tiles, walls, scenery, etc.)\n  - False - checks all objects (can't check critters under objects)\n- passing False to the includeDude argument will ignore dude_obj\n  - **NOTE:** to get an object located on a tile when the cursor is in movement mode (hexagon cursor), use the `tile_under_cursor` function\n"
        }
    },
    "real_dude_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr real_dude_obj()\n```\nReturns the initial `dude_obj` after `set_dude_obj` was used."
        }
    },
    "remove_script": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid remove_script(ObjectPtr obj)\n```\nAccepts a pointer to an object and will remove the script from that object."
        }
    },
    "set_dude_obj": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_dude_obj(ObjectPtr critter)\n```\nTake control of a given critter. Passing value 0 will reset control back to \"real\" dude."
        }
    },
    "set_flags": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_flags(ObjectPtr obj, int flags)\n```\nSets the current flags of an object. All flags are rewritten with given integer, so first get current flags with `get_flags` and use `bwor/bwand` to set/remove specific flag."
        }
    },
    "set_object_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nset_object_data(ObjectPtr object, int offset, int data)\n```\nSets the data at the specified offset of an object."
        }
    },
    "set_scr_name": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_scr_name(string name)\n```\nOverrides the name of the script object that was set from `scrname.msg`.\n- The changed name will be reset each time the player leaves the map or reloads the game\n- Passing an empty string (\"\") to the `name` argument or omitting it will allow the game to get the name for the object from pro_*.msg files\n- __NOTE:__ this function is intended for use in normal game scripts and overrides the name only once for the same object until reset\n"
        }
    },
    "set_script": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_script(ObjectPtr obj, int scriptID)\n```\nAccepts a pointer to an object and scriptID, and applies the given script to an object (scriptID accept the same values as `create_object_sid `from sfall 3.6). If used on an object that is already scripted, it will remove the existing script first; you cannot have multiple scripts attached to a single object. Calling `set_script` on `self_obj` will have all sorts of wacky side effects, and should be avoided. If you add 0x80000000 to the sid when calling `set_script`, `map_enter_p_proc` will be SKIPPED. The `start` proc will always be run."
        }
    },
    "set_self": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_self(ObjectPtr setObj)\n```\nOverrides the script's `self_obj` for the next function call.\n- It is primarily used to allow the calling of functions which take an implicit `self_obj` parameter (e.g. `drop_obj`) from global scripts, but it can also be used from normal scripts.\n- `self_obj` will be reverted to its original value after the next function call.\n- Calling `set_self(0)` will also revert `self_obj` to its original value. It is recommended to call this after each use of `set_self` in normal scripts in order to avoid unforeseen side effects.\n- `source_obj`, `target_obj`, and similar functions will not work if preceded by `set_self`.\n- __NOTE:__ for `use_obj`, `use_obj_on_obj` vanilla functions to work correctly, it is required to call `set_self` twice. You can also access the local variables in the script of an object after calling `set_self` twice.\n"
        }
    },
    "set_unique_id": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint set_unique_id(ObjectPtr object, int flag)\n```\nAssigns a unique ID number to the object and returns it. If a unique ID number has already been assigned to an object, then ID number is returned without reassignment. `flag` is optional.\n- items with unique IDs will not stack with other items of the same type in the inventory\n- to just get the current ID number of an object, use `get_object_data(object, OBJ_DATA_ID)`\n- unique ID numbers are saved in your savegame, and have a range from 0x10000000 to 0x7FFFFFFF\n- there is also a unique ID number range for the player and party members from 18000 to 83535\n- to assign a new ID number generated by the engine to the object (i.e. unassign a unique ID), call the function with two arguments and pass -1 for the flag argument\n"
        }
    },
    "active_hand": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint active_hand\n```"
        }
    },
    "add_g_timer_event": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid add_g_timer_event(int time, int fixedParam)\n```\nAdds a timer event that calls the `timed_event_p_proc` procedure in the current global script\n`time`: the number of ticks after which the event timer is triggered\n`fixedParam`: the value that is passed to the `timed_event_p_proc` procedure for the `fixed_param` function\n"
        }
    },
    "add_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid add_trait(int traitID)\n```\nadds the specified trait to the player"
        }
    },
    "create_message_window": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid create_message_window(string message)\n```"
        }
    },
    "create_spatial": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr create_spatial(int scriptID, int tile, int elevation, int radius)\n```\nCreates new spatial script with given SID, at given tile, and radius."
        }
    },
    "game_loaded": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint game_loaded()\n```\nReturns 1 the first time it is called after a new game or game load, and 0 any time after. It works on an individual basis for each script, so one script wont interfere with others. Its primary use is for global scripts, so that they know when to call `set_global_script_repeat`, but it can be called from normal scripts too."
        }
    },
    "gdialog_get_barter_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint gdialog_get_barter_mod\n```"
        }
    },
    "get_game_mode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_game_mode()\n```\nA more flexible version of in_world_map. It will return a set of flags indicating which mode the game is currently in. These flags are the same as those used in the `set_shader_mode function`."
        }
    },
    "get_inven_ap_cost": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_inven_ap_cost\n```\nReturns the current AP cost to access the inventory in combat"
        }
    },
    "get_kill_counter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_kill_counter(int critterType)\n```"
        }
    },
    "get_light_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_light_level()\n```\nReturns ambient light level in range 0..65536. The value returned by get_light_level may not exactly match that set by `set_light_level`, as `set_light_level` applies modifiers from the Night Vision perk."
        }
    },
    "get_npc_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_npc_level(string npc)\n```"
        }
    },
    "get_proto_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_proto_data(int pid, int offset)\n```\nUsed to read the in-memory copies of the .pro files Fallout makes when they are loaded. The offset refers to the offset in memory from the start of the proto to the element you are reading."
        }
    },
    "get_unspent_ap_bonus": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_unspent_ap_bonus()\n```\nGets the AC bonus you receive per unused action point at the end of your turn in combat. To allow for fractional values, the value given if divided by 4. (Hence the default value is 4 and not 1.)"
        }
    },
    "get_unspent_ap_perk_bonus": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_unspent_ap_perk_bonus()\n```\nSimilar to `get_unspent_ap_bonus`, but accounts for the extra AC granted by the H2H Evade perk. (The default value of this is also 4, equivalent to doubling the original bonus."
        }
    },
    "get_uptime": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_uptime()\n```\nJust a wrapper around the windows GetTickCount() function. It's useful for making time fade effects in shaders, since they already have access to the current tick count."
        }
    },
    "get_viewport_x": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_viewport_x()\n```"
        }
    },
    "get_viewport_y": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_viewport_y()\n```"
        }
    },
    "get_year": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_year\n```"
        }
    },
    "hero_select_win": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid hero_select_win(int)\n```"
        }
    },
    "inc_npc_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid inc_npc_level(int party_member_pid)\n```\nTakes a party member PID or an NPC name (deprecated, for compatibility with sfall 4.1.5/3.8.15 or earlier) as an argument. The NPC must be in your party. This function ignores player level requirements and the minimum 3 player level delay between NPC level gains. It also ignores the random element, regardless of sfall's `NPCAutoLevel` setting."
        }
    },
    "input_funcs_available": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint input_funcs_available()\n```\nThe input functions are only available if the user has the input hook turned on in `ddraw.ini`. Use `input_funcs_available` to check."
        }
    },
    "mark_movie_played": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid mark_movie_played(int id)\n```"
        }
    },
    "message_str_game": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring message_str_game(int fileId, int messageId)\n```\nWorks exactly the same as message_str, except you get messages from files in `text/english/game` folder. Use `GAME_MSG_*` defines or `mstr_*` macros from **sfall.h** to use specific msg file\n- Additional game msg files added by `ExtraGameMsgFileList` setting will have consecutive fileIds assigned beginning from 0x2000 to 0x2FFF. (e.g. if you set `ExtraGameMsgFileList=foo,bar` in `ddraw.ini`, `foo.msg` will be associated with 0x2000 and `bar.msg` with 0x2001.).\n- If a file has a specific number assigned in `ExtraGameMsgFileList`, its fileId will be (0x2000 + assigned number). (e.g. with `ExtraGameMsgFileList=foo,bar:2,foobar` in `ddraw.ini`, `bar.msg` will be associated with 0x2002 and `foobar.msg` with 0x2003.)\n"
        }
    },
    "mod_kill_counter": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid mod_kill_counter(int critterType, int amount)\n```"
        }
    },
    "nb_create_char": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint nb_create_char()\n```\n`nb_*` functions are reserved for the brotherhood tactical training mod, and should be avoided. Not implemented, always returns 0."
        }
    },
    "resume_game": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid resume_game()\n```"
        }
    },
    "set_base_hit_chance_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_base_hit_chance_mod(int max, int mod)\n```"
        }
    },
    "set_base_pickpocket_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_base_pickpocket_mod(int max, int mod)\n```\nChanges maximum chance of success and chance mod for each steal attempt. `max` will replace 95% success chance cap (so you can set 100% maximum chance, for instance). `mod` will add this much percent to each success chance. for example if your chance is 50% and `mod` is 20, you will get 70% actual success rate"
        }
    },
    "set_critter_hit_chance_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_hit_chance_mod(CritterPtr, int max, int mod)\n```"
        }
    },
    "set_critter_pickpocket_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_pickpocket_mod(CritterPtr, int max, int mod)\n```\nThe same as `set_base_pickpocket`, but applies only to specific critter."
        }
    },
    "set_df_model": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_df_model(string name)\n```"
        }
    },
    "set_dm_model": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_dm_model(string name)\n```"
        }
    },
    "set_hit_chance_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_hit_chance_max(int percentage)\n```\nEffects all critters rather than just the player and can set the maximum in range from 0 to 999."
        }
    },
    "set_hp_per_level_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_hp_per_level_mod(int mod)\n```"
        }
    },
    "set_inven_ap_cost": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_inven_ap_cost(int cost)\n```"
        }
    },
    "set_movie_path": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_movie_path(string filename, int movieid)\n```"
        }
    },
    "set_pickpocket_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pickpocket_max(int percentage)\n```\nEffects all critters rather than just the player and can set the maximum in range from 0 to 999."
        }
    },
    "set_pipboy_available": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pipboy_available(int available)\n```\nSets the availability of the pipboy in the game. Use 0 to disable the pipboy, and 1 or 2 to enable it (value 2 does not mark the `VSUIT_MOVIE` movie as \"played\")."
        }
    },
    "set_proto_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_proto_data(int pid, int offset, int value)\n```\nUsed to alter the in-memory copies of the .pro files Fallout makes when they are loaded. The offset refers to the offset in memory from the start of the proto to the element you are reading. Changes are not stored on disc, and are not permanent. If you modify the protos, and then Fallout subsequently reloads the file your changes will be lost."
        }
    },
    "set_unspent_ap_bonus": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_unspent_ap_bonus(int multiplier)\n```\nAlters the AC bonus you receive per unused action point at the end of your turn in combat. To allow for fractional values, the value given if divided by 4. (Hence the default value is 4 and not 1.)"
        }
    },
    "set_unspent_ap_perk_bonus": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_unspent_ap_perk_bonus(int multiplier)\n```\nSimilar to `set_unspent_ap_bonus`, but effects the extra AC granted by the H2H Evade perk. (The default value of this is also 4, equivalent to doubling the original bonus."
        }
    },
    "set_viewport_x": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_viewport_x(int view_x)\n```"
        }
    },
    "set_viewport_y": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_viewport_y(int view_y)\n```"
        }
    },
    "set_xp_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_xp_mod(int percentage)\n```"
        }
    },
    "sneak_success": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sneak_success\n```\nReturns 1 if last sneak attempt (roll against skill) was successful, 0 otherwise. This calls an internal engine function which is used to determine the perception range of critters (which you can override using `HOOK_WITHINPERCEPTION`)."
        }
    },
    "stop_game": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid stop_game()\n```"
        }
    },
    "toggle_active_hand": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid toggle_active_hand\n```"
        }
    },
    "unwield_slot": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func2(\"unwield_slot\", object critter, int slot)\n```\nunequips an item from the specified slot for a critter or the player\ncan take off player's equipped item when the inventory is opened, or the player is in the barter screen\nslot: 0 - armor slot, 1 - right slot, 2 - left slot (see `INVEN_TYPE_*` in **define.h**)\n"
        }
    },
    "get_outline": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_outline(ObjectPtr obj)\n```\nGets the current outline color for an object."
        }
    },
    "outlined_object": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr outlined_object()\n```\nReturns an object that is currently highlighted by hovering the mouse above it."
        }
    },
    "set_outline": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_outline(ObjectPtr obj, int color)\n```\n- sets the outline color of an object (see `OUTLINE_*` constants in **sfall.h**)\n- can also set a custom color from the game palette by shifting the color index value left by 8 bits: `0xCC00` where `CC` is the palette index (available since sfall 4.2.7/3.8.27)\n- passing 0 will disable the outline\n"
        }
    },
    "apply_heaveho_fix": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid apply_heaveho_fix\n```"
        }
    },
    "clear_selectable_perks": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid clear_selectable_perks()\n```\nRestores the \"select a perk\" box to its default state."
        }
    },
    "get_perk_available": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_perk_available(int perk)\n```"
        }
    },
    "get_perk_owed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_perk_owed\n```"
        }
    },
    "has_fake_perk": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint has_fake_perk(string name)\n```\nReturns the number of levels the player has of the perks with the given name or ID of extra perk."
        }
    },
    "has_fake_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint has_fake_trait(string name)\n```\nReturns the number of levels the player has of the traits with the given name or ID of extra trait."
        }
    },
    "hide_real_perks": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid hide_real_perks()\n```\nPrevent the \"select a perk\" box from displaying any of the original 119 perks."
        }
    },
    "perk_add_mode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid perk_add_mode(int type)\n```\nModifies what happens when a fake perk is selected from the perks dialog. It is treated as a set of flags - if bit 1 is set then it is added to the player's traits, if bit 2 is set it is added to the player's perks, and if bit 3 is set it is removed from the list of selectable perks. The default is 0x2."
        }
    },
    "remove_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid remove_trait(int traitID)\n```"
        }
    },
    "seq_perk_freq": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid seq_perk_freq(int value)\n```\nSets the number of levels between each perk."
        }
    },
    "set_fake_perk": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_fake_perk(string name, int level, int image, string desc)\n```\nUsed to add additional traits and perks to the character screen. They will be saved correctly when the player saves and reloads games, but by themselves they will have no further effect on the character. For perks, the allowed range for levels is between 0 and 100; setting the level to 0 removes that perk. For traits, the level must be 0 or 1. The image is a numeric id that corresponds to an entry in `skilldex.lst`. The name is limited to 63 characters and the description to 255 characters by sfall, but internal Fallout limits may be lower."
        }
    },
    "set_fake_trait": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_fake_trait(string name, int active, int image, string desc)\n```\nUsed to add additional traits and perks to the character screen. They will be saved correctly when the player saves and reloads games, but by themselves they will have no further effect on the character. For perks, the allowed range for levels is between 0 and 100; setting the level to 0 removes that perk. For traits, the level must be 0 or 1. The image is a numeric id that corresponds to an entry in `skilldex.lst`. The name is limited to 63 characters and the description to 255 characters by sfall, but internal Fallout limits may be lower."
        }
    },
    "set_perk_agl": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_agl(int perkID, int value)\n```"
        }
    },
    "set_perk_chr": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_chr(int perkID, int value)\n```"
        }
    },
    "set_perk_desc": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_desc(int perkID, string value)\n```"
        }
    },
    "set_perk_end": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_end(int perkID, int value)\n```"
        }
    },
    "set_perk_freq": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_freq(int value)\n```\nSets the number of levels between each perk. Setting to 0 will reset it back to the default. This overrides the effects of the skilled trait. Not saved into the save game, so needs to be called once per reload. Be careful not to let the player obtain a perk when no perks are available to pick, or the game may crash."
        }
    },
    "set_perk_image": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_image(int perkID, int value)\n```"
        }
    },
    "set_perk_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_int(int perkID, int value)\n```"
        }
    },
    "set_perk_lck": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_lck(int perkID, int value)\n```"
        }
    },
    "set_perk_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_level(int perkID, int value)\n```"
        }
    },
    "set_perk_level_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_level_mod(int levels)\n```\nSets a modifier between +25 and -25 that is added/subtracted from the player's level for the purposes of deciding which perks can be chosen."
        }
    },
    "set_perk_name": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_name(int perkID, string value)\n```"
        }
    },
    "set_perk_owed": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_owed(int value)\n```"
        }
    },
    "set_perk_per": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_per(int perkID, int value)\n```"
        }
    },
    "set_perk_ranks": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_ranks(int perkID, int value)\n```"
        }
    },
    "set_perk_skill1": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_skill1(int perkID, int value)\n```"
        }
    },
    "set_perk_skill1_mag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_skill1_mag(int perkID, int value)\n```"
        }
    },
    "set_perk_skill2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_skill2(int perkID, int value)\n```"
        }
    },
    "set_perk_skill2_mag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_skill2_mag(int perkID, int value)\n```"
        }
    },
    "set_perk_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_stat(int perkID, int value)\n```"
        }
    },
    "set_perk_stat_mag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_stat_mag(int perkID, int value)\n```"
        }
    },
    "set_perk_str": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_str(int perkID, int value)\n```"
        }
    },
    "set_perk_type": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perk_type(int perkID, int value)\n```"
        }
    },
    "set_perkbox_title": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_perkbox_title(string title)\n```\nUsed to change the title of the \"select a perk\" box, or by using \"\" it will be set back to the default."
        }
    },
    "set_pyromaniac_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pyromaniac_mod(int bonus)\n```"
        }
    },
    "set_selectable_perk": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_selectable_perk(string name, int active, int image, string desc)\n```\nUsed to add additional items to \"select a perk\" box by setting the 'active' parameter to 1, and to remove them again by setting it to 0."
        }
    },
    "set_swiftlearner_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_swiftlearner_mod(int bonus)\n```"
        }
    },
    "show_real_perks": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid show_real_perks()\n```\nReverts the effect os `hide_real_perks`."
        }
    },
    "set_quest_failure_value": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func2(\"set_quest_failure_value\", int gvarNumber, int thresholdValue)\n```\n- sets the threshold value (failure_threshold) for the quest at which the quest will be considered failed (its description in the pipboy will be crossed out and colored red)\n- `gvarNumber`: the number of the global variable controlling the quest\n- `thresholdValue`: the value of the global variable at which the quest is counted as a failure\n"
        }
    },
    "get_can_rest_on_map": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nget_can_rest_on_map(int mapNum, int elev)\n```\n- returns the set rest value of the map after using the `set_can_rest_on_map` function\n- Returns -1 if the rest value of the map was not previously set (i.e. no data for the map in `sfalldb.sav`)\n- the `can_rest_here values` from `maps.txt` are ignored.\n"
        }
    },
    "set_can_rest_on_map": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_can_rest_on_map(int mapNum, int elev, bool value)\n```\nAllows/disallows to rest on the map for the specified level, overrides the `can_rest_here` values in `maps.txt`.\n- `mapNum` is the map index from `maps.txt`\n- passing -1 to the elev argument will set the rest value for all map elevations\n- the set rest value will be stored in `sfalldb.sav` file (in savegame)\n"
        }
    },
    "add_extra_msg_file": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint add_extra_msg_file(string fileName)\n```\nLoads the custom message file, and returns the file ID number assigned to it in range from 0x3000 to 0x3FFF for the `message_str_game` function to get messages from the file.\n- `fileName`: the name of the custom message file (including the .msg extension) in `text\\<language>\\game\\` directory.\n\nAlternative form: `int add_extra_msg_file(string fileName, int fileNumber)`\n- `fileNumber`: the file ID number for the `message_str_game` function. The available range is from 0x2000 to 0x2FFF (see `ExtraGameMsgFileList` setting in `ddraw.ini`)\nUse `fileNumber` only if you want to add a message file without editing `ddraw.ini` or existing scripts to support the old way.\n"
        }
    },
    "critter_inven_obj2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr critter_inven_obj2(ObjectPtr obj, int type)\n```\nWorks just like vanilla `critter_inven_obj`, but correctly reports item in player's inactive hand slot."
        }
    },
    "dialog_message": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid dialog_message(string text)\n```\nDisplays a message in the NPC response window in dialog or barter screen."
        }
    },
    "get_current_inven_size": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nget_current_inven_size(ObjectPtr object)\n```\nReturns the current inventory size of the container or the critter."
        }
    },
    "get_metarule_table": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray get_metarule_table\n```\nReturns names of all currently available script functions."
        }
    },
    "get_object_ai_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_object_ai_data(ObjectPtr object, int aiParam)\n```\nReturns the setting value from the AI packet of an object (critter). Use `AI_CAP_*` constants from **define_extra.h** for the `aiParam` argument to get AI value."
        }
    },
    "get_text_width": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_text_width(string text)\n```\nReturns the text width in pixels for the currently set font."
        }
    },
    "item_weight": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint item_weight(ObjectPtr obj)\n```\nGets the current weight of an object."
        }
    },
    "metarule_exist": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool metarule_exist(string metaruleName)\n```\nReturns True if the specified name of metarule (sfall_funcX) function exists in the current version of sfall."
        }
    },
    "npc_engine_level_up": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid npc_engine_level_up(bool toggle)\n```\nEnables/disables the engine function that increases the level of party members in the player leveling process. If the engine function is disabled, the process of leveling up party members should be performed by script functions."
        }
    },
    "objects_in_radius": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nobjects_in_radius\", int tile, int radius, int elevation, int type)\n```\n- returns an array of objects of a type (see `OBJ_TYPE_*` constants in **define_extra.h**) within the specified radius from the given tile\n- passing -1 to the `type` argument or _not specifying it_ will return all objects within the radius\n- the radius is limited to 50 hexes\n"
        }
    },
    "set_drugs_data": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_drugs_data(int type, int pid, int value)\n```\nOverrides the parameters of drugs set in the configuration file (`DrugsFile` setting in `ddraw.ini`). Type: 0 - changes the value of `NumEffects` for the drug (see `Drugs.ini` for the description of `NumEffects`), 1 - changes the duration of the addiction effect for the drug (a value of 1 = one game minute)."
        }
    },
    "set_rest_heal_time": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_rest_heal_time(int time)\n```\nSets the time interval in minutes for healing during resting. The default is 180. Note: The interval will be reset each time the player reloads the game."
        }
    },
    "set_rest_mode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_rest_mode(int flags)\n```\nSets the bit flags for the rest mode (see `RESTMODE_*` constants in **sfall.h**). Passing 0 will reset the rest mode. It will also be reset each time the player reloads the game."
        }
    },
    "sfall_func0(\"hide_window\")": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func0(\"hide_window\")\n```\nHides currently active (selected) script window."
        }
    },
    "sfall_func0(\"show_window\")": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func0(\"show_window\")\n```\nDisplays the script window previously hidden with the `sfall_func0(\"hide_window\")` function."
        }
    },
    "sfall_func1(\"hide_window\", string winName)": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func0(\"hide_window\")\n```\nHides the specified script window.\n- winName: the window name, assigned to the window by the `CreateWin/create_win` function\n"
        }
    },
    "sfall_func1(\"remove_timer_event\", int fixedParam)": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func1(\"remove_timer_event\", int fixedParam)\n```\nRemoves all timer events with the specified `fixedParam` value for the current global script."
        }
    },
    "sfall_func1(\"show_window\", string winName)": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func1(\"show_window\", string winName)\n```\nDisplays the specified hidden script window.\n`winName`: the window name, assigned to the window by the `CreateWin/create_win` function\n"
        }
    },
    "sfall_func2(\"string_compare\", string str1, string str2)": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool sfall_func2(\"string_compare\", string str1, string str2)\n```\nCompares two strings case-insensitive, and returns `True` if the two strings are matched."
        }
    },
    "sfall_func3(\"string_compare\", string str1, string str2, int codePage)": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nbool sfall_func3(\"string_compare\", string str1, string str2, int codePage)\n```\nCompares two strings case-insensitive, and returns `True` if the two strings are matched\n- `codePage`: code page number to properly compare national characters in the range 128-255 of the ASCII code table\navailable encodings: 1250-1252, 866\n"
        }
    },
    "spatial_radius": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint spatial_radius(ObjectPtr obj)\n```\nReturns radius of spatial script, associated with given dummy-object (returned by `create_spatial`)."
        }
    },
    "void sfall_func0(\"remove_timer_event\")": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid sfall_func0(\"remove_timer_event\")\n```\nClears all set timer events for the current global script."
        }
    },
    "get_available_skill_points": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_available_skill_points()\n```"
        }
    },
    "get_critter_skill_points": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_critter_skill_points(int critter, int skill)\n```\nWill get the number of additional points a critter has in a skill, on top of whatever they have from their stats and other bonuses"
        }
    },
    "mod_skill_points_per_level": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid mod_skill_points_per_level(int value)\n```\nAccepts a value of between -100 and 100, and modifies the number of skill points the player recieves when they level up. This is a modification of what would otherwise happen, rather than a replacement. The value is not saved into the save game, so should be reset in the `game_loaded` section of a script."
        }
    },
    "set_available_skill_points": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_available_skill_points(int value)\n```"
        }
    },
    "set_base_skill_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_base_skill_mod(int max)\n```"
        }
    },
    "set_critter_skill_mod": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_skill_mod(CritterPtr, int max)\n```"
        }
    },
    "set_critter_skill_points": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_skill_points(int critter, int skill, int value)\n```\nWill set the number of additional points a critter has in a skill, on top of whatever they have from their stats and other bonuses. Note that skill points are part of the proto, so calling it on a critter will affect all critters that share the same proto."
        }
    },
    "set_skill_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_skill_max(int value)\n```\nCan't be used to increase the skill cap above 300."
        }
    },
    "get_critter_base_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_critter_base_stat(CritterPtr, int StatID)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "get_critter_extra_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_critter_extra_stat(CritterPtr, int StatID)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "get_pc_base_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_pc_base_stat(int StatID)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "get_pc_extra_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_pc_extra_stat(int StatID)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "get_stat_max": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nget_stat_max(int stat, bool who = False)\n```\n- Returns the maximum set value of the specified stat (see `set_stat_max` functions)\n- who: 0 (`False`) or omitting the argument - returns the value of the player, 1 (`True`) - returns the value set for other critters\n\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "get_stat_min": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nget_stat_min(int stat, bool who = False)\n```\n- Returns the minimum set value of the specified stat (see `set_stat_min` functions)\n- who: 0 (`False`) or omitting the argument - returns the value of the player, 1 (`True`) - returns the value set for other critters\n\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "set_critter_base_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_base_stat(CritterPtr, int StatID, int value)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "set_critter_extra_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_critter_extra_stat(CritterPtr, int StatID, int value)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "set_pc_base_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pc_base_stat(int StatID, int value)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "set_pc_extra_stat": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_pc_extra_stat(int StatID, int value)\n```\nThe `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat."
        }
    },
    "charcode": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint charcode(string text)\n```\nReturns ASCII code for the first character in given string."
        }
    },
    "get_string_pointer": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_string_pointer(string text)\n```\n(DEPRECATED) Returns a pointer to a string variable or to a text\n- __NOTE:__ this function is intended for use only in `HOOK_DESCRIPTIONOBJ`. Starting from sfall 4.4/3.8.40, you can return normal strings directly in the hook without calling the function\n"
        }
    },
    "string_find": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint string_find(string haystack, string needle)\n```\nReturns the position of the first occurrence of a `needle` string in a `haystack` string, or -1 if not found. The first character position is 0 (zero)."
        }
    },
    "string_find_from": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint string_find_from(string haystack, string needle, int pos)\n```\nWorks the same as `string_find`, except you can specify the position to start the search.\n- If `pos` is negative - it indicates a position starting from the end of the string, similar to `substr()`.\n"
        }
    },
    "string_format": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring string_format(string format, any val1, any val2, ...)\n```\nFormats given values using standard syntax of C `printf` function (google \"printf\" for format details). However, it is limited to formatting up to 7 values.\n- The format string is limited to 1024 characters\n"
        }
    },
    "string_format_array": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring string_format_array(string format, int array)\n```\nThe same as string_format, but accepts an array of parameters."
        }
    },
    "string_replace": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring string_replace(string str, string search, string replace)\n```\nReplaces all occurances of a given search string in a string with a given replacement string."
        }
    },
    "string_split": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray string_split(string text, split)\n```\nTakes a string and a seperator, searches the string for all instances of the seperator, and returns a temp array filled with the pieces of the string split at each instance. If you give an empty string as the seperator, the string is split into individual characters. You can use this to search for a substring in a string like this: `strlen(get_array(string_split(haystack, needle), 0))`"
        }
    },
    "string_to_case": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring sfall_func2(\"string_to_case\", string text, int toCase)\n```\nConverts all letters in the given string to the specified case.\n```\ntoCase: 0 - lowercase, 1 - uppercase\n```\nNOTE: this function works only for English letters of A-Z/a-z.\n"
        }
    },
    "strlen": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint strlen(string text)\n```\nReturns string length."
        }
    },
    "substr": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring substr(string text, int start, int length)\n```\nCuts a substring from a string starting at \"start\" up to \"length\" characters. The first character position is 0 (zero).\n- If start is negative - it indicates a position starting from the end of the string (for example `substr(\"test\", -2, 2)` will return last 2 charactes: \"st\").\n- If length is negative - it means so many characters will be omitted from the end of string (example: `substr(\"test\", 0, -2)` will return string without last 2 characters: \"te\").\n- If length is zero - it will return a string from the starting position to the end of the string. **New behavior** for sfall 4.2.2/3.8.22\n"
        }
    },
    "add_iface_tag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid add_iface_tag()\n```\nAdds one custom box to the current boxes, and returns the number of the added tag (-1 if the tags limit is exceeded. The maximum number of boxes is limited to 126 tags.\nshow_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED."
        }
    },
    "hide_iface_tag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid hide_iface_tag(int tag)\n```\nshow_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED."
        }
    },
    "is_iface_tag_active": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint is_iface_tag_active(int tag)\n```\nStarting from sfall 4.1, can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.\nshow_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED."
        }
    },
    "set_iface_tag_text": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_iface_tag_text(int tag, string text, int color)\n```\nSets the text messages and colors for custom notification boxes to the interface without the need to add messages to `intrface.msg` and set up the font colors in `ddraw.ini`. Tag value is the same as used in `show_iface_tag`, `hide_iface_tag`, and `is_iface_tag_active`. The valid range is from 5 to (4 + the value of `BoxBarCount` in `ddraw.ini`) or the number of the last custom box added using the `add_iface_tag` function. The text is limited to 19 characters.\nshow_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED."
        }
    },
    "show_iface_tag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid show_iface_tag(int tag)\n```\nshow_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED."
        }
    },
    "get_tile_fid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_tile_fid(int tileData)\n```\n- Returns FID information about the square under the given tile at elevation 0\n- Pass elevation as 4-bit number in bits 25-28 to access other elevations\n- Pass result mode in bits 29-32: 0 - ground FID, 1 - roof FID, 2 - raw data.\n"
        }
    },
    "get_tile_ground_fid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_tile_ground_fid(int tileNum, int elevation)\n```\nReturns FID of a ground tile at given tile number and elevation."
        }
    },
    "get_tile_roof_fid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_tile_roof_fid(int tileNum, int elevation)\n```\nReturns FID of a roof tile at given tile number and elevation. Note that FID of 1 is used when there is no actual roof."
        }
    },
    "obj_blocking_line": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr obj_blocking_line(ObjectPtr objFrom, int tileTo, int blockingType)\n```\nReturns first object which blocks direct linear path from `objFrom` to `tileTo` using selected blocking function (see `BLOCKING_TYPE_*` constants in **sfall.h**). If path is clear (no blocker was encountered by selected function) - returns 0. `objFrom` is always excluded from calculations, but is required to be a valid object."
        }
    },
    "obj_blocking_tile": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nObjectPtr obj_blocking_tile(int tileNum, int elevation, int blockingType)\n```\nReturns first object blocking given tile using given blocking function or 0 if tile is clear."
        }
    },
    "path_find_to": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray path_find_to(ObjectPtr objFrom, int tileTo, int blockingType)\n```\nReturns the shortest path to a given tile using given blocking function as an array of tile directions (0..5) to move on each step. Array length equals to a number of steps. Empty array means that specified target cannot be reached."
        }
    },
    "tile_by_position": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_by_position(int x, int y)\n```\n- returns the tile number at the x, y position relative to the top-left corner of the screen\n- if the position is outside of the range of tiles, it will return -1\n"
        }
    },
    "tile_get_objs": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\narray tile_get_objs(int tileNum, int elevation)\n```\nReturns an array of all objects at given tile. It will include any hidden, dead or system objects (like cursor), so make sure to check properly when iterating."
        }
    },
    "tile_light": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_light(int elevation, int tileNum)\n```\nReturns light intensity at the given tile in range from 0 to 65535."
        }
    },
    "tile_refresh_display": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid tile_refresh_display()\n```\nRedraws the game scene (tiles, walls, objects, etc.)."
        }
    },
    "tile_under_cursor": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint tile_under_cursor\n```"
        }
    },
    "atof": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat atof(string text)\n```"
        }
    },
    "atoi": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint atoi(string text)\n```"
        }
    },
    "sprintf": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nstring sprintf(string format, any value)\n```\nFormats given value using standart syntax of C `printf` function (google \"printf\" for format details). However, it is limited to formatting only 1 value.\n- Can be used to get character by ASCII code (\"%c\").\n"
        }
    },
    "typeof": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint typeof(any value)\n```\nReturns type of the given value: VALTYPE_INT, VALTYPE_FLOAT or VALTYPE_STR."
        }
    },
    "sfall_ver_build": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_ver_build()\n```"
        }
    },
    "sfall_ver_major": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_ver_major()\n```"
        }
    },
    "sfall_ver_minor": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_ver_minor()\n```"
        }
    },
    "fs_copy": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_copy(string path, string source)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_create": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_create(string path, int size)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_delete": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_delete(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_find": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_find(string path)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_pos(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_read_byte": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_read_byte(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_read_float": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nfloat fs_read_float(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_read_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_read_int(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_read_short": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_read_short(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_resize": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_resize(int id, int size)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_seek": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_seek(int id, int pos)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_size": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint fs_size(int id)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_write_bstring": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_write_bstring(int id, string data)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_write_byte": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_write_byte(int id, int data)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_write_float": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_write_float(int id, int data)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_write_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_write_int(int id, int data)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_write_short": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_write_short(int id, int data)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "fs_write_string": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid fs_write_string(int id, string data)\n```\nThe `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files."
        }
    },
    "get_weapon_ammo_count": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_weapon_ammo_count(ObjectPtr weapon)\n```\nThis also allows to get current charges of a misc item (Geiger counter, etc)."
        }
    },
    "get_weapon_ammo_pid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_weapon_ammo_pid(ObjectPtr weapon)\n```"
        }
    },
    "set_weapon_ammo_count": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_weapon_ammo_count(ObjectPtr weapon, int count)\n```\nThis also allows to set current charges of a misc item (Geiger counter, etc)."
        }
    },
    "set_weapon_ammo_pid": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_weapon_ammo_pid(ObjectPtr weapon, int pid)\n```"
        }
    },
    "create_win": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid create_win(string winName, int x, int y, int width, int height, int flags)\n```\n`flags` argument is optional. Works just like vanilla `CreateWin` function, but creates a window with `MoveOnTop` flag if the flags argument is not specified, and allows to set additional flags for the created window. `MoveOnTop` flag allows the created window to be placed on top of the game interface."
        }
    },
    "draw_image": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid draw_image(string/int artFile/artId, int frame, int x, int y, bool noTransparent)\n```\n- displays the specified PCX or FRM image in the active window created by vanilla `CreateWin` or sfall's `create_win` script function\n- artFile/artId: path to the PCX/FRM file (e.g. `art\\\\inven\\\\5mmap.frm`), or its FRM ID number (e.g. `0x7000026`, see specification of the FID format)\noptional arguments:\n- `frame`: frame number, the first frame starts from zero\n- `x/y`: offset relative to the top-left corner of the window\n- `noTransparent`: pass True to display an image without transparent background\n- NOTE: to omit optional arguments starting from the right, call the functions with different `sfall_funcX` (e.g. `sfall_func4(\"draw_image\", pathFile, frame, x, y))`\n"
        }
    },
    "draw_image_scaled": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid draw_image_scaled(string/int artFile/artId, int frame, int x, int y, int width, int height)\n```\n- displays the specified PCX or FRM image in the active window created by vanilla `CreateWin` or sfall's `create_win` script function\n- artFile/artId: path to the PCX/FRM file (e.g. `art\\\\inven\\\\5mmap.frm`), or its FRM ID number (e.g. `0x7000026`, see specification of the FID format)\noptional arguments:\n- `frame`: frame number, the first frame starts from zero\n- `x/y`: offset relative to the top-left corner of the window\n- `width/height`: the new width/height to scale the image to. Pass -1 to either width or height to keep the aspect ratio when scaling\n- NOTE: to omit optional arguments starting from the right, call the functions with different `sfall_funcX` (e.g. `sfall_func4(\"draw_image\", pathFile, frame, x, y))`\n- if called without `x/y/width/height` arguments, the image will be scaled to fit the window without transparent background\n"
        }
    },
    "get_window_attribute": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_func1(\"get_window_attribute\", int winType)\n```\nAlternative form: `int sfall_func2(\"get_window_attribute\", int winType, int attrType)`\nReturns the attribute of the specified interface window by the `attrType` argument.\n- `winType`: the type number of the interface window (see `WINTYPE_*` constants in **sfall.h**)\n- `attrType`: `0` - checks and returns a value of 1 if the specified interface window is created by the game (same as without the argument)\n              `1` - X position, `2` - Y position (relative to the top-left corner of the game screen)\n              `3` - interface width size, `4` - interface height size\n              `-1` - returns an associative array of keys (left, top, right, bottom) and values that define the position of the window rectangle\n              (use standard syntax to access array values, e.g. `winRect.top`, `winRect.bottom`)\n- returns -1 if the specified attribute cannot be obtained\n"
        }
    },
    "get_window_under_mouse": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_window_under_mouse()\n```"
        }
    },
    "interface_art_draw": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_func4(\"interface_art_draw\", int winType, string artFile/int artID, int x, int y)\n```\n```c++\nint sfall_func4(\"interface_art_draw\", int winType, string artFile/int artID, int x, int y)\nint sfall_func5(\"interface_art_draw\", int winType, string artFile/int artID, int x, int y, int frame)\nint sfall_func6(\"interface_art_draw\", int winType, string artFile/int artID, int x, int y, int frame, array param)\n```\n- draws the specified PCX or FRM image in the game interface window, returns -1 on any error\n- `winType`: the type number of the interface window (see `WINTYPE_*` constants in **sfall.h**)\n  this also takes the value of the flag (0x1000000) to prevent immediate redrawing of the interface window\n- `artFile/artId`: path to the PCX/FRM file (e.g. `art\\\\inven\\\\5mmap.frm`), or its FRM ID number (e.g. `0x7000026`, see specification of the FID format)\n- `x/y`: offset relative to the top-left corner of the window\n\noptional arguments:\n- `frame`: frame number, the first frame starts from zero\n- `param`: an array which specifies additional parameters, where:\n  index 0 - sprite direction for multi-directional FRM\n  index 1/index 2 - the new width/height to scale the image to. Pass -1 to use the original width/height\n"
        }
    },
    "interface_print": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_func5(\"interface_print\", string text, int winType, int x, int y, int color)\n```\n```c++\nint sfall_func5(\"interface_print\", string text, int winType, int x, int y, int color)\nint sfall_func6(\"interface_print\", string text, int winType, int x, int y, int color, int width)\n```\n- displays the text in the specified interface window with the current font. Use vanilla `SetFont` function to set the font\n- returns the count of lines printed, or -1 on any error\n- `text`: the text to be printed. Use the `\\n` control character to move text to a new line (example: \"Hello\\nWorld!\")\n- `winType`: the type number of the interface window (see `WINTYPE_*` constants in sfall.h)\n- `x/y`: offset relative to the top-left corner of the window\n- `color`: the color index in the game palette. Pass 0 if the text color was previously set by vanilla `SetTextColor` function\n  It can also take additional flags (via `bwor`) for displaying text:\n  - `0x0010000` - adds a shadow to the text, the 'textshadow' compiler constant\n  - `0x1000000` - prevents immediate redrawing of the interface window, the `textdirect` compiler constant (works the other way around)\n  - `0x2000000` - fills the background of the text with black color, the `textnofill` compiler constant (works the other way around)\n- `width` (optional): the maximum width of the text. The text will be wrapped to fit within the specified width\n"
        }
    },
    "message_box": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint sfall_func4(\"message_box\", string message, int flags, int color1, int color2)\n```\nCreates a dialog box with text and returns the result of pressing the button: 0 - No (Escape), 1 - Yes/Done (Enter). Returns -1 if for some reason the dialog box cannot be created.\n```\n- message: the text in the dialog box. Use the `\\n` control character to move text to a new line (example: \"Hello\\nWorld!\")\noptional arguments:\n- flags: mode flags (see `MSGBOX_*` constants in define_extra.h). Pass -1 to skip setting the flags (default flags are NORMAL and YESNO)\n- color1/color2: the color index in the game palette. `color1` sets the text color for the first line, and `color2` for all subsequent lines of text (default color is 145)\n```\n"
        }
    },
    "nterface_overlay": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nsfall_func2(\"interface_overlay\", int winType, int mode)\n```\nAlternative form: `int sfall_func6(\"interface_overlay\", int winType, 2, int x, int y, int width, int height)`.\n\nCreates an additional drawing surface above the graphic layer of the specified interface window. All subsequent calls of `interface_art_draw` and `interface_print` functions will draw on it.\n- `winType`: the type number of the interface window (see `WINTYPE_*` constants in **sfall.h**)\n- `mode`: 1 - creates a new overlay surface\n          2 - clears the overlay area or the specified rectangle defined by the `x`, `y`, `width`, `height` arguments\n          0 - destroys the created overlay surface (frees up the memory allocated to the surface)\n"
        }
    },
    "set_window_flag": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_window_flag(string winName/int winID, int flag, bool value)\n```\nChanges the specified flag for the created script or game interface window.\n- winName: the window name, assigned to the window by the `CreateWin/create_win` function\n- winID: the ID number of the interface or script window obtained with the `get_window_under_mouse` function, or 0 for the current game interface\n- flag: the flag to change (see `WIN_FLAG_*` constants in **define_extra.h**)\n- value: `True` - set the flag, `False` - unset the flag\n"
        }
    },
    "win_fill_color": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint win_fill_color(int x, int y, int width, int height, int color)\n```\nFills the rectangle area of the currently selected script window with the specified color, or clears the window with transparent (index 0) color (call the function without arguments).\n- `color`: the color index in the game palette (from 0 to 255)\n"
        }
    },
    "get_world_map_x_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_world_map_x_pos()\n```\nThe mapper manual lists the functions `world_map_x_pos` and `world_map_y_pos`, which supposedly return the player's x and y positions on the world map. `get_world_map_x/y_pos` are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game."
        }
    },
    "get_world_map_y_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint get_world_map_y_pos()\n```\nThe mapper manual lists the functions `world_map_x_pos` and `world_map_y_pos`, which supposedly return the player's x and y positions on the world map. `get_world_map_x/y_pos` are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game."
        }
    },
    "set_world_map_pos": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid set_world_map_pos(int x, int y)\n```\nThe mapper manual lists the functions `world_map_x_pos` and `world_map_y_pos`, which supposedly return the player's x and y positions on the world map. `get_world_map_x/y_pos` are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game."
        }
    },
    "call_offset_r0": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint call_offset_r0(int address)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_r1": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint call_offset_r1(int address, int arg1)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_r2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint call_offset_r2(int address, int arg1, int arg2)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_r3": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint call_offset_r3(int address, int arg1, int arg2, int arg3)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_r4": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint call_offset_r4(int address, int arg1, int arg2, int arg3, int arg4)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_v0": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid call_offset_v0(int address)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_v1": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid call_offset_v1(int address, int arg1)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_v2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid call_offset_v2(int address, int arg1, int arg2)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_v3": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid call_offset_v3(int address, int arg1, int arg2, int arg3)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "call_offset_v4": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid call_offset_v4(int address, int arg1, int arg2, int arg3, int arg4)\n```\nCan be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "sfall_func0": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func0(char* funcName)\n```\nCalls script function with given name and no arguments."
        }
    },
    "sfall_func1": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func1(char* funcName, arg1)\n```\nCalls script function with given name and 1 argument."
        }
    },
    "sfall_func2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func2(char* funcName, arg1, arg2)\n```\nCalls script function with given name and 2 arguments."
        }
    },
    "sfall_func3": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func3(char* funcName, arg1, arg2, arg3)\n```\nCalls script function with given name and 3 arguments."
        }
    },
    "sfall_func4": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func4(char* funcName, arg1, arg2, arg3, arg4)\n```\nCalls script function with given name and 4 arguments."
        }
    },
    "sfall_func5": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func5(char* funcName, arg1, arg2, arg3, arg4, arg5)\n```\nCalls script function with given name and 5 arguments."
        }
    },
    "sfall_func6": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func6(char* funcName, arg1, arg2, arg3, arg4, arg5, arg6)\n```\nCalls script function with given name and 6 arguments"
        }
    },
    "sfall_func7": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func7(string funcName, arg1, arg2, arg3, arg4, arg5, arg6, arg7)\n```\nCalls script function with given name and 7 arguments"
        }
    },
    "sfall_func8": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nany sfall_func8(string funcName, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)\n```\nCalls script function with given name and 8 arguments"
        }
    },
    "read_byte": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint read_byte(int address)\n```\nThese functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space."
        }
    },
    "read_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint read_int(int address)\n```\nThese functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space."
        }
    },
    "read_short": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint read_short(int address)\n```\nThese functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space."
        }
    },
    "read_string": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nint read_string(int address)\n```\nThese functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space."
        }
    },
    "write_byte": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid write_byte(int address, int value)\n```\nThese functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "write_int": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid write_int(int address, int value)\n```\nThese functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "write_short": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid write_short(int address, int value)\n```\nThese functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "write_string": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nvoid write_string(int address, string value)\n```\nThese functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`."
        }
    },
    "HOOK_ADJUSTFID": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ADJUSTFID\n```\nRuns after calculating character figure FID on the inventory screen, whenever the game decides that character appearance might change.\nAlso happens on other screens, like barter.\n\n__NOTE:__ FID has following format: `0x0ABBCDDD`, where: `A` - object type, `BB` - animation code (always 0 in this case), `C` - weapon code, `DDD` - FRM index in LST file.\n\n```\nint     arg0 - the vanilla FID calculated by the engine according to critter base FID and armor/weapon being used\nint     arg1 - the modified FID calculated by the internal sfall code (like Hero Appearance Mod)\n\nint     ret0 - overrides the calculated FID with provided value\n```\n"
        }
    },
    "HOOK_ADJUSTPOISON": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ADJUSTPOISON\n```\nRuns when a critter's poison level is changed, or when the player takes damage from the poison.\n\n```\nCritter arg0 - the critter\nint     arg1 - the amount of poison being added/removed\nint     arg2 - the damage value at the time of applying the poison effect\n               (damage from the poison effect is implemented only for the player character; for other critters, this value will always be 0)\n\nint     ret0 - the new amount of poison being added/removed\nint     ret1 - the new damage value, only negative values are allowed (will only be valid at the time of taking damage from the poison)\n```\n"
        }
    },
    "HOOK_ADJUSTRADS": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ADJUSTRADS\n```\nRuns when a critter's radiation level is changed.\n\n```\nCritter arg0 - the critter (usually dude_obj)\nint     arg1 - the amount of radiation being added/removed\n\nint     ret0 - the new amount of radiation being added/removed\n```\n"
        }
    },
    "HOOK_AFTERHITROLL": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_AFTERHITROLL\n```\nRuns after Fallout has decided if an attack will hit or miss.\n\n```\nint     arg0 - If the attack will hit: 0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit\nCritter arg1 - The attacker\nCritter arg2 - The target of the attack\nint     arg3 - The bodypart\nint     arg4 - The hit chance\n\nint     ret0 - Override the hit/miss\nint     ret1 - Override the targeted bodypart\nCritter ret2 - Override the target of the attack\n```\n"
        }
    },
    "HOOK_AMMOCOST": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_AMMOCOST\n```\nRuns when calculating ammo cost for a weapon. Doesn't affect damage, only how much ammo is spent.<br>\nBy default, a weapon can perform an attack with at least one ammo, regardless of ammo cost calculation.<br>\nTo add proper checks for ammo before attacking (hook type 1 `arg3`), set **CheckWeaponAmmoCost=1** in **Misc** section of ddraw.ini.\n\n__NOTE:__ The return value must be greater than or equal to 0 to be valid.\n\n```\nItem    arg0 - The weapon\nint     arg1 - Number of bullets in burst or 1 for single shots\nint     arg2 - The amount of ammo that will be consumed, calculated by the original ammo cost function (this is basically 2 for Super Cattle Prod and Mega Power Fist)\n               NOTE: for hook type 2, this value is the ammo cost per round (default is always 1)\nint     arg3 - Type of hook:\n               0 - when subtracting ammo after single shot attack\n               1 - when checking for \"out of ammo\" before attack\n               2 - when calculating number of burst rounds\n               3 - when subtracting ammo after burst attack\n\nint     ret0 - The new amount of ammo to be consumed, or ammo cost per round for hook type 2 (set to 0 for unlimited ammo)\n```\n"
        }
    },
    "HOOK_BARTERPRICE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_BARTERPRICE\n```\nRuns whenever the value of goods being purchased is calculated.\n\nNOTE: the hook is executed twice when entering the barter screen or after transaction: the first time is for the player and the second time is for NPC.\n\n```\nCritter arg0 - the critter doing the bartering (either dude_obj or inven_dude)\nCritter arg1 - the critter being bartered with\nint     arg2 - the default value of the goods\nCritter arg3 - table of requested goods (being bought from NPC)\nint     arg4 - the number of actual caps in the barter stack (as opposed to goods)\nint     arg5 - the value of all goods being traded before skill modifications\nCritter arg6 - table of offered goods (being sold to NPC)\nint     arg7 - the total cost of the goods offered by the player\nint     arg8 - 1 if the \"offers\" button was pressed (not for a party member), 0 otherwise\nint     arg9 - 1 if trading with a party member, 0 otherwise\n\nint     ret0 - the modified value of all of the goods (pass -1 if you just want to modify offered goods)\nint     ret1 - the modified value of all offered goods\n```\n"
        }
    },
    "HOOK_BESTWEAPON": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_BESTWEAPON\n```\nRuns when the AI decides which weapon is the best while searching the inventory for a weapon to equip in combat.\nThis also runs when the player presses the \"Use Best Weapon\" button on the party member control panel.\n\n```\nCritter arg0 - the critter searching for a weapon\nItem    arg1 - the best weapon chosen from two items\nItem    arg2 - the first choice of weapon\nItem    arg3 - the second choice of weapon\nCritter arg4 - the target of the critter (can be 0)\n\nItem    ret0 - overrides the chosen best weapon\n```\n"
        }
    },
    "HOOK_CALCAPCOST": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_CALCAPCOST\n```\nRuns whenever Fallout calculates the AP cost of using an active item in hand (or unarmed attack). Doesn't run for moving.<br>\nNote that the first time a game is loaded, this script doesn't run before the initial interface is drawn, so if the script effects the AP cost of whatever is in the player's hands at the time the wrong AP cost will be shown. It will be fixed the next time the interface is redrawn.<br>\nYou can get the weapon object by checking item slot based on attack type (`ATKTYPE_LWEP1`, `ATKTYPE_LWEP2`, etc) and then calling `critter_inven_obj`.\n\n```\nCritter arg0 - The critter performing the action\nint     arg1 - Attack Type (see ATKTYPE_* constants)\nint     arg2 - Is aimed attack (1 or 0)\nint     arg3 - The default AP cost\nItem    arg4 - The weapon for which the cost is calculated. If it is 0, the pointer to the weapon can still be obtained by the aforementioned method\n\nint     ret0 - The new AP cost\n```\n"
        }
    },
    "HOOK_CANUSEWEAPON": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_CANUSEWEAPON\n```\nRun when the AI checks whether it can use a weapon.\nThis mostly happens when NPCs try to find weapons in their inventory or on the map.\n\n```\nCritter arg0 - the critter doing the check\nItem    arg1 - the weapon being checked\nint     arg2 - attack type (see ATKTYPE_* constants)\nint     arg3 - original result of engine function: 1 - can use, 0 - cannot use\n\nint     ret0 - overrides the result of engine function. Any non-zero value allows using the weapon\n```\n"
        }
    },
    "HOOK_CARTRAVEL": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_CARTRAVEL\n```\nRuns continuously during worldmap travel on car.\n\n```\nint     arg0 - vanilla car speed (between 3 and 8 \"steps\")\nint     arg1 - vanilla fuel consumption (100 and below)\n\nint     ret0 - car speed override (pass -1 if you just want to override fuel consumption)\nint     ret1 - fuel consumption override\n```\n"
        }
    },
    "HOOK_COMBATDAMAGE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_COMBATDAMAGE\n```\nRuns when:\n1.  Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation.\n2.  AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.\n\nDoes not run for misses, or non-combat damage like dynamite explosions.\n\n```\nCritter arg0  - The target\nCritter arg1  - The attacker\nint     arg2  - The amount of damage to the target\nint     arg3  - The amount of damage to the attacker\nint     arg4  - The special effect flags for the target (use bwand DAM_* to check specific flags)\nint     arg5  - The special effect flags for the attacker (use bwand DAM_* to check specific flags)\nItem    arg6  - The weapon used in the attack\nint     arg7  - The bodypart that was struck\nint     arg8  - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)\nint     arg9 - Number of bullets actually hit the target (1 for melee attacks)\nint     arg10 - The amount of knockback to the target\nint     arg11 - Attack Type (see ATKTYPE_* constants)\nmixed   arg12 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)\n\nint     ret0 - The damage to the target\nint     ret1 - The damage to the attacker\nint     ret2 - The special effect flags for the target\nint     ret3 - The special effect flags for the attacker\nint     ret4 - The amount of knockback to the target\n```\n"
        }
    },
    "HOOK_COMBATTURN": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_COMBATTURN\n```\nRuns before and after each turn in combat (for both PC and NPC).\n\n```\nint     arg0 - event type:\n               1 - start of turn\n               0 - normal end of turn\n              -1 - combat ends abruptly (by script or by pressing Enter during PC turn)\n              -2 - combat ends normally (hook always runs at the end of combat)\nCritter arg1 - critter doing the turn\nint     arg2 - 1 at the start/end of the player's turn after loading a game saved in combat mode, 0 otherwise\n\nint     ret0 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat\n```\n"
        }
    },
    "HOOK_DEATHANIM1": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_DEATHANIM1\n```\nRuns before Fallout tries to calculate the death animation. Lets you switch out which weapon Fallout sees.\n\nDoes not run for critters in the knockdown/out state.\n\n```\nint     arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)\nCritter arg1 - The attacker\nCritter arg2 - The target\nint     arg3 - The amount of damage\nint     arg4 - Unused, always -1. Use this if you are using the same procedure for HOOK_DEATHANIM1 and HOOK_DEATHANIM2 (since sfall 4.1/3.8.24)\n\nint     ret0 - The pid of an object to override the attacking weapon with\n```\n"
        }
    },
    "HOOK_DEATHANIM2": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_DEATHANIM2\n```\nRuns after Fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than `HOOK_DEATHANIM1`, but performs no validation.<br>\nWhen using `critter_dmg` function, this script will also run. In that case weapon pid will be -1 and attacker will point to an object with `obj_art_fid == 0x20001F5`.\n\nDoes not run for critters in the knockdown/out state.\n\n```\nint     arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)\nCritter arg1 - The attacker\nCritter arg2 - The target\nint     arg3 - The amount of damage\nint     arg4 - The death anim id calculated by Fallout\n\nint     ret0 - The death anim id to override with\n```\n"
        }
    },
    "HOOK_DEPRECATED HOOKS": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_DEPRECATED HOOKS\n```\n* `hs_hexmoveblocking.int`\n* `hs_hexaiblocking.int`\n* `hs_hexshootblocking.int`\n* `hs_hexsightblocking.int`\n\nRun when checking to see if a hex blocks movement or shooting. (or ai-ing, presumably...)\n\n__NOTE:__ These hook scripts can become very CPU-intensive and you should avoid using them.\nFor this reason, these hooks are not thoroughly supported in sfall, and may be removed in future versions.<br>\nIf you want to check if some tile or path is blocked, use functions: `obj_blocking_tile`, `obj_blocking_line`, `path_find_to`.<br>\nIf you want script to be called every time NPC moves by hex in combat, use `HOOK_MOVECOST` hook.\n\n```\nCritter arg0 - the critter doing the moving\nint     arg1 - the tile number being checked\nint     arg2 - the elevation being checked\nint     arg3 - 1 if the hex would normally be blocking\n\nObj     ret0 - 0 if the hex doesn't block, or any sort of object pointer if it does\n```\n"
        }
    },
    "HOOK_DESCRIPTIONOBJ": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_DESCRIPTIONOBJ\n```\nRuns when using the examine action icon to display the description of an object. You can override the description text.\nAn example usage would be to add an additional description to the item based on player's stats/skills.\n\nDoes not run if the script of the object overrides the description.\n\n__NOTE:__ Returning a pointer to the new text received from the `get_string_pointer` function is still valid, but the method is DEPRECATED and is left for backward compatibility only.\n\n```\nObj     arg0 - the object\n\nString  ret0 - the new description text to use\n```\n"
        }
    },
    "HOOK_ENCOUNTER": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ENCOUNTER\n```\nRuns whenever a random encounter occurs (except the Horrigan meeting and scripted encounters), or when the player enters a local map from the world map.\nYou can override the map for loading or the encounter.\n\n```\nint     arg0 - event type: 0 - when a random encounter occurs, 1 - when the player enters from the world map\nint     arg1 - the map ID that the encounter will load (see MAPS.h or Maps.txt)\nint     arg2 - 1 when the encounter occurs is a special encounter, 0 otherwise\n\nint     ret0 - overrides the map ID, or pass -1 for event type 0 to cancel the encounter and continue traveling\nint     ret1 - pass 1 to cancel the encounter and load the specified map from the ret0 (only for event type 0)\n```\n"
        }
    },
    "HOOK_EXPLOSIVETIMER": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_EXPLOSIVETIMER\n```\nRuns after setting the explosive timer. You can override the result.\n\n```\nint     arg0 - the time in ticks set in the timer\nObj     arg1 - the explosive object\nint     arg2 - the result of engine calculation of whether the timer was set successfully: 1 - failure, 2 - success (similar to ROLL_* in Condtion.h)\n\nint     ret0 - overrides the time of the timer (maximum 18000 ticks)\nint     ret1 - overrides the result of engine calculation: 0/1 - failure, 2/3 - success (similar to ROLL_*), any other value - use engine handler\n```\n"
        }
    },
    "HOOK_FINDTARGET": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_FINDTARGET\n```\nRuns when the AI is trying to pick a target in combat. Fallout first chooses a list of 4 likely suspects, then normally sorts them in order of weakness/distance/etc depending on the AI caps of the attacker.<br>\nThis hook replaces that sorting function, allowing you to sort the targets in some arbitrary way.\n\nThe return values can include critters that weren't in the list of possible targets, but the additional targets may still be discarded later on in the combat turn if they are out of the attackers perception or the chance of a successful hit is too low. The list of possible targets often includes duplicated entries, but this is fixed in sfall 4.2.3/3.8.23.\nUse `set_sfall_return` to give the 4 targets, in order of preference. If you want to specify less than 4 targets, fill in the extra spaces with 0's or pass -1 to skip the return value.\n\n__NOTE:__ The engine can choose targets by the following criteria:\n1) The nearest enemy to the attacker.\n2) The enemy that attacked the attacker.\n3) The enemy that attacked an NPC from the same team as the attacker.\n4) The enemy that is attacked by an NPC from the same team as the attacker.\n\n```\nCritter arg0 - The attacker\nCritter arg1 - A possible target\nCritter arg2 - A possible target\nCritter arg3 - A possible target\nCritter arg4 - A possible target\n\nCritter ret0 - The first choice of target\nCritter ret1 - The second choice of target\nCritter ret2 - The third choice of target\nCritter ret3 - The fourth choice of target\n```\n"
        }
    },
    "HOOK_GAMEMODECHANGE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_GAMEMODECHANGE\n```\nRuns once every time when the game mode was changed, like opening/closing the inventory, character screen, pipboy, etc.\n\n```\nint     arg0 - event type: 1 - when the player exits the game, 0 - otherwise\nint     arg1 - the previous game mode\n```\n"
        }
    },
    "HOOK_INVENWIELD": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_INVENWIELD\n```\nRuns before causing a critter or the player to wield/unwield an armor or a weapon (except when using the inventory by PC).\nAn example usage would be to change critter art depending on armor being used or to dynamically customize weapon animations.\n\n__NOTE:__ When replacing a previously wielded armor or weapon, the unwielding hook will not be executed.\nIf you need to rely on this, try checking if armor/weapon is already equipped when wielding hook is executed.\n\n```\nCritter arg0 - critter\nItem    arg1 - item being wielded or unwielded (weapon/armor)\nint     arg2 - slot (INVEN_TYPE_*)\nint     arg3 - 1 when wielding, 0 when unwielding\nint     arg4 - 1 when removing an equipped item from inventory, 0 otherwise\n\nint     ret0 - overrides hard-coded handler (-1 - use engine handler, any other value - override) - NOT RECOMMENDED\n```\n"
        }
    },
    "HOOK_INVENTORYMOVE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_INVENTORYMOVE\n```\nRuns before moving items between inventory slots in dude interface. You can override the action.\n\nWhat you can NOT do with this hook:\n- force moving items to inappropriate slots (like gun in armor slot)\nWhat you can do:\n- restrict player from using specific weapons or armors\n- add AP costs for all inventory movement including reloading\n- apply or remove some special scripted effects depending on PC's armor\n\n```\nint     arg0 - Target slot:\n               0 - main backpack\n               1 - left hand\n               2 - right hand\n               3 - armor slot\n               4 - weapon, when reloading it by dropping ammo\n               5 - container, like bag/backpack\n               6 - dropping on the ground\n               7 - picking up item\n               8 - dropping item on the character portrait\nItem    arg1 - Item being moved\nItem    arg2 - Item being replaced, weapon being reloaded, or container being filled (can be 0)\n\nint     ret0 - Override setting (-1 - use engine handler, any other value - prevent relocation of item/reloading weapon/picking up item)\n```\n\nNotes for the event of dropping items on the ground:\n- the event is called for each item when dropping multiple items from the stack\n- for ammo type items, the number of dropped ammo in a pack can be found by using the `get_weapon_ammo_count` function\n- for the `PID_BOTTLE_CAPS` item, the event is called only once, and the number of dropped units can be found from the value of the `OBJ_DATA_CUR_CHARGES` object field (or with the `get_weapon_ammo_count` function)\n"
        }
    },
    "HOOK_ITEMDAMAGE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ITEMDAMAGE\n```\nRuns when retrieving the damage rating of the player's used weapon. (Which may be their fists.)\n\n```\nint     arg0 - The default min damage\nint     arg1 - The default max damage\nItem    arg2 - The weapon used (0 if unarmed)\nCritter arg3 - The critter doing the attacking\nint     arg4 - The type of attack\nint     arg5 - non-zero if this is an attack using a melee weapon\n\nint     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is\nint     ret1 - The new maximum damage\n```\n"
        }
    },
    "HOOK_KEYPRESS": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_KEYPRESS\n```\nRuns once every time when any key was pressed or released.\n* DX codes: see **dik.h** header or https://kippykip.com/b3ddocs/commands/scancodes.htm\n* [VK codes](http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731%28v=vs.85%29.aspx)\n\n__NOTE:__ If you want to override a key, the new key DX scancode should be the same for both pressed and released events.\n\n```\nint     arg0 - event type: 1 - pressed, 0 - released\nint     arg1 - key DX scancode\nint     arg2 - key VK code (very similar to ASCII codes)\n\nint     ret0 - overrides the pressed key (a new key DX scancode or 0 for no override)\n```\n"
        }
    },
    "HOOK_MOUSECLICK": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_MOUSECLICK\n```\nRuns once every time when a mouse button was pressed or released.\n\n```\nint     arg0 - event type: 1 - pressed, 0 - released\nint     arg1 - button number (0 - left, 1 - right, up to 7)\n```\n"
        }
    },
    "HOOK_MOVECOST": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_MOVECOST\n```\nRuns when calculating the AP cost of movement.\n\n```\nCritter arg0 - the critter doing the moving\nint     arg1 - the number of hexes being moved\nint     arg2 - the original AP cost\n\nint     ret0 - the new AP cost\n```\n"
        }
    },
    "HOOK_ONDEATH": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ONDEATH\n```\nRuns immediately after a critter dies for any reason. No return values; this is just a convenience for when you need to do something after death for a large number of different critters and don't want to have to script each and every one of them.\n\n```\nCritter arg0 - The critter that just died\n```\n"
        }
    },
    "HOOK_ONEXPLOSION": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ONEXPLOSION\n```\nRuns when Fallout is checking all the tiles within the explosion radius for targets before an explosion occurs.\nThe tile checking will be interrupted when 6 additional targets (critters) are received.\n\n```\nint     arg0 - event type: 1 - when checking objects within the explosion radius without causing damage (e.g. the player drops an active explosive), 0 - otherwise\nCritter arg1 - the attacker\nint     arg2 - the tile on which the explosion occurs\nint     arg3 - checked tile within the explosion radius\nObj     arg4 - first found object on the checked tile as an additional target\nCritter arg5 - the target critter, may be 0 or equal to the attacker\nint     arg6 - 1 when using throwing weapons (e.g. grenades), 0 otherwise\n\nint     ret0 - overrides the found object on the checked tile, pass 0 to skip the object\n```\n"
        }
    },
    "HOOK_REMOVEINVENOBJ": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_REMOVEINVENOBJ\n```\nRuns when an object is removed from a container or critter's inventory for any reason.\n\n```\nObj     arg0 - the owner that the object is being removed from\nItem    arg1 - the item that is being removed\nint     arg2 - the number of items to remove\nint     arg3 - The reason the object is being removed (see RMOBJ_* constants)\nObj     arg4 - The destination object when the item is moved to another object, 0 otherwise\n```\n"
        }
    },
    "HOOK_RESTTIMER": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_RESTTIMER\n```\nRuns continuously while the player is resting (using pipboy alarm clock).\n\n```\nint     arg0 - the game time in ticks\nint     arg1 - event type: 1 - when the resting ends normally, -1 - when pressing ESC to cancel the timer, 0 - otherwise\nint     arg2 - the hour part of the length of resting time\nint     arg3 - the minute part of the length of resting time\n\nint     ret0 - pass 1 to interrupt the resting, pass 0 to continue the rest if it was interrupted by pressing ESC key\n```\n"
        }
    },
    "HOOK_ROLLCHECK": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_ROLLCHECK\n```\nRuns when a game event performs a random roll to check the chance of success or failure.\n\n```\nint     arg0 - event type:\n               1 - checks the chance of an attack hitting the target\n               2 - checks the chance of a bullet from a burst hitting the target (for burst attacks)\n               3 - checks the chance when using skills (not listed below)\n               4 - check the chance of using Repair skill\n               5 - check the chance of using Doctor skill\n               6 - check the chance of using Steal skill for the thief (usually the player)\n               7 - the second Steal skill chance check for the target to catch the thief, in which the target's failure is the thief's success result\nint     arg1 - the value of roll result (see ROLL_* constants), which is calculated as:\n               for ROLL_CRITICAL_SUCCESS: random(1, 100) <= (random_chance / 10) + bonus\n               for ROLL_CRITICAL_FAILURE: random(1, 100) <= -random_chance / 10\nint     arg2 - the chance value\nint     arg3 - the bonus value, used when checking critical success\nint     arg4 - random chance (calculated as: chance - random(1, 100)), where a negative value is a failure check (ROLL_FAILURE)\n\nint     ret0 - overrides the roll result\n```\n"
        }
    },
    "HOOK_SETGLOBALVAR": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_SETGLOBALVAR\n```\nRuns when setting the value of a global variable.\n\n```\nint     arg0 - the index number of the global variable being set\nint     arg1 - the set value of the global variable\n\nint     ret0 - overrides the value of the global variable\n```\n"
        }
    },
    "HOOK_SETLIGHTING": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_SETLIGHTING\n```\nRuns before setting the light level for an object or a map. You can override the result.\n\n```\nObj     arg0 - the object being set, or -1 when setting the light level for a map\nint     arg1 - the light intensity\nint     arg2 - the light radius, or -1 when setting the light level for a map\n\nint     ret0 - overrides the light intensity. Intensity range is from 0 to 65536\nint     ret1 - overrides the light radius. Radius range is from 0 to 8 (works only for the object)\n```\n"
        }
    },
    "HOOK_SNEAK": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_SNEAK\n```\nRuns when the Sneak skill is activated, or when the game rolls another Sneak check after the duration for the current one is over.\nYou can override the result of a random Sneak check or the duration time for the current result.\n\n```\nint     arg0 - Sneak check result: 1 - success, 0 - failure\nint     arg1 - the duration in ticks for the current Sneak check (time depends on Sneak skill level)\nCritter arg2 - the critter (usually dude_obj)\n\nint     ret0 - overrides the result of the Sneak check\nint     ret1 - overrides the duration time for the current result\n```\n"
        }
    },
    "HOOK_STDPROCEDURE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_STDPROCEDURE\n```\nRuns before Fallout executes a standard procedure (handler) in any script of any object.\nNOTE: this hook will not be executed for `start`, `critter_p_proc`, `timed_event_p_proc`, and `map_update_p_proc` procedures.\n\n```\nint     arg0 - the number of the standard script handler (see *_proc in define.h)\nObj     arg1 - the object that owns this handler (self_obj)\nObj     arg2 - the object that called this handler (source_obj, can be 0)\nint     arg3 - always 0 (1 for _END version)\nObj     arg4 - the object that is acted upon by this handler (target_obj, can be 0)\nint     arg5 - the parameter of this call (fixed_param), useful for combat_proc\n\nint     ret0 - pass -1 to cancel the execution of the handler\n```\n"
        }
    },
    "HOOK_STDPROCEDUREEND": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_STDPROCEDUREEND\n```\nRuns after Fallout executes a standard procedure (handler) in any script of any object.\nNOTE: this hook will not be executed for `start`, `critter_p_proc`, `timed_event_p_proc`, and `map_update_p_proc` procedures.\n\n```\nint     arg0 - the number of the standard script handler (see *_proc in define.h)\nObj     arg1 - the object that owns this handler (self_obj)\nObj     arg2 - the object that called this handler (source_obj, can be 0)\nint     arg3 - always 1 (procedure end)\nObj     arg4 - the object that is acted upon by this handler (target_obj, can be 0)\nint     arg5 - the parameter of this call (fixed_param), useful for combat_proc\n```\n"
        }
    },
    "HOOK_STEAL": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_STEAL\n```\nRuns when checking an attempt to steal or plant an item in other inventory using Steal skill.\n\nThis is fired before the default handlers are called, which you can override. In this case you MUST provide message of the result to player (\"You steal the %s\", \"You are caught planting the %s\", etc.).\nExample message (vanilla behavior):<br>\n`display_msg(sprintf(mstr_skill(570 + (isSuccess != false) + arg3 * 2), obj_name(arg2)));`\n\n```\nCritter arg0 - Thief\nObj     arg1 - The target\nItem    arg2 - The item being stolen/planted\nint     arg3 - 0 when stealing, 1 when planting\nint     arg4 - quantity of the item being stolen/planted\n\nint     ret0 - overrides hard-coded handler (2 - force fail without closing window, 1 - force success, 0 - force fail, -1 - use engine handler)\nint     ret1 - overrides experience points gained for stealing this item (must be greater than or equal to 0)\n```\n"
        }
    },
    "HOOK_SUBCOMBATDAMAGE": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_SUBCOMBATDAMAGE\n```\nThis hook overrides the vanilla damage calculation formula.\nRuns when:\n1. Before the game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts).\n2. AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.\n\nDoes not run for misses, non-combat damage like dynamite explosions, or if one of the damage formulas is selected in ddraw.ini.\n\n```\nCritter arg0 - the attacker\nCritter arg1 - the target\nItem    arg2 - the weapon used in the attack\nint     arg3 - attack type (see ATKTYPE_* constants)\nint     arg4 - number of bullets actually hit the target (1 for melee attacks)\nint     arg5 - target's Damage Resistance (DR) value (affected by critical hit effects, perks, traits, and special unarmed attacks)\nint     arg6 - target's Damage Threshold (DT) value (affected by critical hit effects, perks, traits, and special unarmed attacks)\nint     arg7 - bonus ranged damage from the perk\nint     arg8 - damage multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)\nint     arg9 - combat difficulty multiplier (125 - rough, 100 - normal, 75 - wimpy; for player or party members it's always 100)\nint     arg10 - the calculated amount of damage (usually 0, required when using multiple hook scripts to calculate damage and using the set_sfall_arg function)\nmixed   arg11 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)\n\nint     ret0 - the returned amount of damage\n```\n"
        }
    },
    "HOOK_TARGETOBJECT": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_TARGETOBJECT\n```\nRuns when the targeting cursor hovers over an object, or when the player tries to attack the target object.\nYou can override the target object or prevent the player from attacking the chosen target.\n\n```\nint     arg0 - event type: 0 - when the targeting cursor hovers over the object, 1 - when trying to attack the target object\nint     arg1 - 1 when the target object is valid to attack, 0 otherwise\nObj     arg2 - the target object\n\nmixed   ret0 - overrides the target object, or pass -1 to prevent the player from attacking the object\n```\n"
        }
    },
    "HOOK_TOHIT": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_TOHIT\n```\nRuns when Fallout is calculating the chances of an attack striking a target.<br>\nRuns after the hit chance is fully calculated normally, including applying the 95% cap.\n\n```\nint     arg0 - The hit chance (capped)\nCritter arg1 - The attacker\nCritter arg2 - The target of the attack\nint     arg3 - The targeted bodypart\nint     arg4 - Source tile (may differ from attacker's tile, when AI is considering potential fire position)\nint     arg5 - Attack Type (see ATKTYPE_* constants)\nint     arg6 - Ranged flag. 1 if the hit chance calculation takes into account the distance to the target. This does not mean the attack is a ranged attack\nint     arg7 - The raw hit chance before applying the cap\n\nint     ret0 - The new hit chance. The value is limited to the range of -99 to 999\n```\n"
        }
    },
    "HOOK_USEANIMOBJ": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_USEANIMOBJ\n```\nRuns before playing the \"use\" (usually \"magic hands\") animation when a critter uses a scenery/container object on the map, or before walking/running animation if the player is at a distance from the object.\n\n```\nCritter arg0 - the critter that uses an object (usually dude_obj)\nObj     arg1 - the object being used\nint     arg2 - the animation code being used (see ANIM_* in Animcomd.h)\n\nint     ret0 - overrides the animation code (pass -1 if you want to skip the animation)\n```\n"
        }
    },
    "HOOK_USEOBJ": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_USEOBJ\n```\nRuns when:\n1. a critter uses an object from inventory which have \"Use\" action flag set or it's an active flare or dynamite.\n2. player uses an object from main interface\n\nThis is fired before the object is used, and the relevant `use_obj` script procedures are run. You can disable default item behavior.\n\n__NOTE:__ You can't remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1.\n\n```\nCritter arg0 - The user\nObj     arg1 - The object used\n\nint     ret0 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler)\n```\n"
        }
    },
    "HOOK_USEOBJON": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_USEOBJON\n```\nRuns when:\n1. a critter uses an object on another critter. (Or themselves)\n1. a critter uses an object from inventory screen AND this object does not have \"Use\" action flag set and it's not active flare or explosive.\n1. player or AI uses any drug\n\nThis is fired before the object is used, and the relevant `use_obj_on` script procedures are run. You can disable default item behavior.\n\n__NOTE:__ You can't remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1.\n\n```\nCritter arg0 - The target\nCritter arg1 - The user\nint     arg2 - The object used\n\nint     ret0 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler)\n```\n"
        }
    },
    "HOOK_USESKILL": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_USESKILL\n```\nRuns when using any skill on any object.\n\nThis is fired before the default handlers are called, which you can override. In this case you should write your own skill use handler entirely, or otherwise nothing will happen (this includes fade in/fade out, time lapsing and messages - all of this can be scripted; to get vanilla text messages - use `message_str_game` along with `sprintf`).\nSuggested use - override First Aid/Doctor skills to buff/nerf them, override Steal skill to disallow observing NPCs inventories in some cases.\n\nDoes not run if the script of the object calls `script_overrides` for using the skill.\n\n```\nCritter arg0 - The user critter\nObj     arg1 - The target object\nint     arg2 - skill being used\nint     arg3 - skill bonus from items such as first aid kits\n\nint     ret0 - overrides hard-coded handler (-1 - use engine handler, any other value - override; if it is 0, there will be a 10% chance of removing the used medical item)\n```\n"
        }
    },
    "HOOK_USESKILLON": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_USESKILLON\n```\nRuns before using any skill on any object. Lets you override the critter that uses the skill.\n\n__NOTE:__ The user critter can't be overridden when using Steal skill.\n\n```\nCritter arg0 - the user critter (usually dude_obj)\nObj     arg1 - the target object/critter\nint     arg2 - skill being used\n\nint     ret0 - a new critter to override the user critter. Pass -1 to cancel the skill use, pass 0 to skip this return value\nint     ret1 - pass 1 to allow the skill to be used in combat (only for dude_obj or critter being controlled by the player)\n```\n"
        }
    },
    "HOOK_WITHINPERCEPTION": {
        "contents": {
            "kind": "markdown",
            "value": "```fallout-ssl-tooltip\nHOOK_WITHINPERCEPTION\n```\nRuns when checking if one critter sees another critter. This is used in different situations like combat AI. You can override the result.\n\n__NOTE:__ `obj_can_see_obj` calls this first when deciding if critter can possibly see another critter with regard to perception, lighting, sneak factors.<br>\nIf check fails, the end result is false. If check succeeds (e.g. critter is within perception range), another check is made if there is any blocking tile between two critters (which includes stuff like windows, large bushes, barrels, etc.) and if there is - check still fails.<br>\nYou can override \"within perception\" check by returning 0 or 1, OR, as a convenience, you can also override blocking check after the perception check by returning 2 instead. In this case you should add \"line of sight\" check inside your hook script, otherwise critters will detect you through walls.\n\nThis is fired after the default calculation is made.\n\n```\nCritter arg0 - Watcher object\nObj     arg1 - Target object\nint     arg2 - Result of vanilla function: 1 - within perception range, 0 - otherwise\nint     arg3 - Type of hook:\n    1 - when being called from obj_can_see_obj script function\n    2 - when being called from obj_can_hear_obj script function (need to set ObjCanHearObjFix=1 in ddraw.ini)\n    3 - when AI determines whether it sees a potential target when selecting attack targets\n    0 - all other cases\n\nint     ret0 - overrides the returned result of the function:\n               0 - not in range (can't see)\n               1 - in range (will see if not blocked)\n               2 - forced detection (will see regardless, only used in obj_can_see_obj script function which is called by every critter in the game)\n```\n"
        }
    }
}